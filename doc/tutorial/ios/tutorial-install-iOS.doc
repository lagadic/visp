/**

\page tutorial-install-iOS Tutorial: Installation from source for iOS devices
\tableofcontents

In this tutorial you will learn how to build ViSP framework from source on OSX in order to use it for iOS developments. These steps have been tested:
- on OSX El Capitan 10.11.45 and 10.11.6, with CMake 3.5.2, Xcode 7.3.1 and 8.0, and Python 2.7.10
- on OSX Sierra 10.12.5, with CMake 3.9.1, Xcode 8.3.3, and Python 2.7.10.
- on OSX Sierra 10.12.6, with CMake 3.9.1, Xcode 9.0.1, and Python 2.7.10.

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section install_iOS_required Install required software

- CMake gui 2.8.12.2 for OSX or higher that could be download at : http://www.cmake.org
- Xcode
- Python 2.7 (not tested with Python 3)

\section install_iOS_opencv Getting OpenCV framework (optional)

We suggest to follow these steps in order to install OpenCV framework in such a way that the resulting ViSP framework builds with OpenCV as 3rd party. This could be useful for users who want to use ViSP and OpenCV together. It will also allow to exploit keypoints throw ViSP classes (vpKltOpencv, vpKeyPoint) or the model-based tracker in his hybrid version (vpMbKltTracker). If you are not interested in capabilities leveraged by using OpenCV as 3rd party, just skip this section.

- Download the latest <a href="http://opencv.org/releases.html">OpenCV for iOS</a> like \c opencv-3.3.1-ios-framework.zip
- Unzip the archive in a directory denoted \c \<framework_dir\>/ios. If \c \<framework_dir\> is for example the following folder \c ~/framework just do the following:
\code
$ mkdir -p ~/framework/ios
\endcode
If the download was performed with Safari, do the following
\code
$ mv ~/Downloads/opencv2.framework ~/framework/ios/
\endcode
or if the download was either performed with Firefox, do the following
\code
$ unzip ~/Downloads/opencv-3.3.0-ios-framework.zip -d ~/framework/ios
\endcode
- Add \c opencv2.framework to iPhoneOS existing frameworks
\code
$ cd `xcrun --sdk iphoneos --show-sdk-platform-path`/Developer/Library/Frameworks
$ sudo ln -s ~/framework/ios/opencv2.framework
\endcode
- Add \c opencv2.framework to iPhoneSimulator existing frameworks
\code
$ cd `xcrun --sdk iphonesimulator --show-sdk-platform-path`/Developer/Library/Frameworks
$ sudo ln -s ~/framework/ios/opencv2.framework
\endcode


\section install_iOS_get_source Getting ViSP source code

\note The following steps are only working with ViSP 3.0.1 or higher.

Here the goal is to get ViSP source code in a directory denoted \c \<framework_dir\>. If \c \<framework_dir\> is for example the following folder \c ~/framework there are different ways to get ViSP:

- You can get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the following command
\code
$ cd ~/framework
$ git clone https://github.com/lagadic/visp.git
\endcode

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once downloaded, uncompress the file using
\code
$ tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz -C ~/framework
\endcode

- Or you can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once downloaded, uncompress the file using either
\code
$ tar xvzf visp-x.y.z.tar.gz -C ~/framework
\endcode
or
\code
$ unzip visp-x.y.z.zip -d ~/framework
\endcode

- We suppose now that ViSP source is in a directory denoted \c \<framework_dir\> besides ios folder.
\code
$ ls ~/framework
ios  visp
\endcode

\section install_iOS_build Building ViSP framework

- Build ViSP framework
\code
$ cd ~/framework
$ python visp/platforms/ios/build_framework.py ios
\endcode

- Once build, you will have ``~/framework/ios/visp3.framework`` that could be added to a Xcode project for iOS devices. If you follow \ref install_iOS_opencv you have also ``~/framework/ios/opencv2.framework`` that should also be added to the Xcode project.
\code
$ ls ~/framework/ios
build			opencv2.framework	visp3.framework
\endcode

\note ViSP framework is build with capabilities that enables the usage of the following 3rd parties: XML, OpenCV, pthread, apriltag, lapack.

\section install_iOS_next Next tutorial

You are now ready to see the next \ref tutorial-getting-started-iOS that shows how to use ViSP as a 3rd party to build your own project for iOS devices.

*/
