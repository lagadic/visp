/**

\page tutorial-install-win10-msvc14-uwp Tutorial: Installation from source for Universal Windows Platform (UWP)
\tableofcontents

In this tutorial you will learn how to build ViSP framework for Universal Windows Platform (UWP) to include ViSP functionalities in apps developments that target a wide range of devices including PC, mobile, Xbox, HoloLens, IoT, and Surface Hub. 

This tutorial has been tested on Windows 10 (64 bit), with CMake 3.7.1 and Visual Studio Community 2015 and is only working since ViSP 3.0.1.

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section tutorial-install-uwp_required Install required software

- CMake last version that could be download at http://www.cmake.org
- <a href="https://www.visualstudio.com/downloads/">Visual Studio Community 2015</a>. Make sure that the Universal Windows App Development Tools are selected from the optional features list. Without these tools, you won't be able to create your universal apps. After the installation, start Visual Studio and create an empty C++ project to install the common tools for Visual C++ 2015.

\note If you have already Visual Stodio 2015 installed and don't know if the Universal Windows App Development Tools are enabled see \ref install_uwp_tips_msvc.

After installing Visual Studio software, you need to <a href="https://msdn.microsoft.com/windows/uwp/get-started/enable-your-device-for-development">enable your Windows 10 device</a> for development. 


\section install_uwp_get_visp_source Get ViSP source code

There are different ways to get ViSP source code.

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once visp-x.y.z.tar.gz or visp-x.y.z.zip is downloaded, uncompress the file.

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once visp-snapshot-yyyy-mm-dd.tar.gz is downloaded, uncompress the file.

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the git command line (see \ref install_win7_tip_git):
\code
C:\ViSP> git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in a directory denoted \c \<source_dir\>, for example \c C:\\ViSP\\visp.

Next we suggest to first build ViSP without OpenCV.

\section install_uwp_build_without_opencv Build ViSP without OpenCV

\subsection install_uwp_build_ws_10 Build for Windows Store 10.0

- Configure ViSP build for Windows Store 10 targeting a x86 platform, by opening a cmd terminal and running: 
\code
$ cd C:\ViSP
$ md visp-build-msvc14-uwp-ws-10
$ cd visp-build-msvc14-uwp-ws-10
$ cmake.exe -G "Visual Studio 14 2015" -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0" -DCMAKE_VS_EFFECTIVE_PLATFORMS:String=x86 ../visp
\endcode

- To build ViSP just double click on \c C:/ViSP/visp-build-msvc14-uwp-ws-10/VISP.sln solution file. This action will open ViSP project in Visual Studio C++.

- With Visual Studio build and install the solution. If everything goes right you will find ViSP libraries and headers in \c C:\\ViSP\\visp-build-msvc14-uwp-ws-10\\install folder. 

\subsection install_uwp_build_ws_8_1 Build for Windows Store 8.1

- Configure ViSP build for Windows Store 8.1 targeting a x86 platform, by opening a cmd terminal and running: 
\code
$ cd C:\ViSP
$ md visp-build-msvc14-uwp-ws-8.1
$ cd visp-build-msvc14-uwp-ws-8.1
$ cmake.exe -G "Visual Studio 14 2015" -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="8.1" -DCMAKE_VS_EFFECTIVE_PLATFORMS:String=x86 ../visp
\endcode

- To build ViSP just double click on \c C:/ViSP/visp-build-msvc14-uwp-ws-8.1/VISP.sln solution file. This action will open ViSP project in Visual Studio C++.

- With Visual Studio build and install the solution. If everything goes right you will find ViSP libraries and headers in \c C:\\ViSP\\visp-build-msvc14-uwp-ws-8.1\\install folder.

\subsection install_uwp_build_wp_8_1 Build for Windows Phone 8.1

- Configure ViSP build for Windows Phone 8.1 targeting a x86 platform, by opening a cmd terminal and running: 
\code
$ cd C:\ViSP
$ md visp-build-msvc14-uwp-wp-8.1
$ cd visp-build-msvc14-uwp-wp-8.1
$ cmake.exe -G "Visual Studio 14 2015" -DCMAKE_SYSTEM_NAME:String=WindowsPhone -DCMAKE_SYSTEM_VERSION:String="8.1" -DCMAKE_VS_EFFECTIVE_PLATFORMS:String=x86 ../visp
\endcode

- To build ViSP just double click on \c C:/ViSP/visp-build-msvc14-uwp-wp-8.1/VISP.sln solution file. This action will open ViSP project in Visual Studio C++.

- With Visual Studio build and install the solution. If everything goes right you will find ViSP libraries and headers in \c C:\\ViSP\\visp-build-msvc14-uwp-wp-8.1\\install folder. 

Now if you want that ViSP benefits from OpenCV functionalities, you can follow the next section.

\section install_uwp_build_with_opencv Build ViSP with OpenCV

\note The following steps are given for Windows Store 10.0 targetting a x86 platform. They need to be adapted to your use case.

Building ViSP with OpenCV as 3rd party needs first to succeed in building OpenCV for UWP. As of writing on January 2017, the way is to use Microsoft fork <a href="https://github.com/Microsoft/opencv">https://github.com/Microsoft/opencv</a> and branch \c vs2015-samples.

- Get OpenCV source code
\code
$ cd C:\OpenCV
$ git clone https://github.com/Microsoft/opencv.git
$ cd opencv
$ git checkout vs2015-samples
\endcode

- Download <a href="http://visp-doc.inria.fr/download/opencv/patch/opencv-microsoft-branch-vs2015-samples-patch.diff">opencv-microsoft-branch-vs2015-samples-patch.diff</a> patch and save it in \c C:\\OpenCV folder. This patch allows to add \c /WZ compiler option when building highgui and videoio modules.
- Modify the source code applying the patch
\code
$ git apply --ignore-space-change --ignore-whitespace ..\opencv-microsoft-branch-vs2015-samples-patch.diff
\endcode

- Configure OpenCV build. The following command is for Windows Store 10.0 targetting a x86 platform but could be easily adapted:
\code
$ cd C:\OpenCV
$ md opencv-build-msvc14-uwp-ws-10.0
$ cd opencv-build-msvc14-uwp-ws-10.0
$ cmake.exe -G "Visual Studio 14 2015" -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0" -DCMAKE_VS_EFFECTIVE_PLATFORMS:String=x86  -DBUILD_opencv_ts=OFF ../opencv
\endcode

- Open \c C:/OpenCV/opencv-build-msvc14-uwp-ws-10/opencv.sln file with Visual Studio 2015, build and install all the solution

- If everything goes right you will find OpenCV libraries and headers in \c C:\\OpenCV\\opencv-build-msvc14-uwp-ws-10\\install folder.

Now you can use OpenCV as third-party and configure ViSP in order to use OpenCV. To this end modify the cmake command that was used to \ref install_uwp_build_without_opencv by adding \c -DOpenCV_DIR=C:\\OpenCV\\opencv-build-msvc14-uwp-ws-10\\install option to cmake command line:

\code
$ cd C:\ViSP\visp-build-msvc14-uwp-ws-10
$ cmake.exe -G "Visual Studio 14 2015" -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0" -DCMAKE_VS_EFFECTIVE_PLATFORMS:String=x86 -DOpenCV_DIR=C:/OpenCV/opencv-build-msvc14-uwp-ws-10/install ../visp
\endcode

As described in \ref install_uwp_build_without_opencv, open again ViSP solution file, build and install ViSP.

\section install_uwp_tips Tips and tricks
\subsection install_uwp_tips_msvc How to add Universal Windows App Development Tools support

In case you're trying to build Windows Store and Windows Phone 10.0 projects having only default Visual Studio 2015 installation you'll likely get the following error during \c cmake run:
\code
A Windows Store component with CMake requires both the Windows Desktop SDK
as well as the Windows Store '10.0' SDK. Please make sure that you have
both installed
\endcode

Resolution consists in:
- On the Start menu select Settings
- Select System > Apps & features.
- Select Microsoft Visual Studio 2015 program, and right click to modify installation
\image html img-uwp-msvc-modify.png
- Select Modify
\image html img-uwp-msvc-modify2.png
- Enable "Universal Windows App Development Tools" and "Windows 8.1 and Windows Phone 8.0/8.1 Tools"
\image html img-uwp-msvc-modify3.png
- Select Update button

*/
