/**

\page tutorial-install-win10-msvc15-uwp Tutorial: Installation from source for UWP with Visual C++ 2017 (vc15)
\tableofcontents

In this tutorial you will learn how to build ViSP framework for Universal Windows Platform (UWP) to include ViSP functionalities in apps developments that target a wide range of devices including PC, mobile, Xbox, HoloLens, IoT, and Surface Hub. 

This tutorial has been tested on Windows 10 (64 bit), with CMake 3.9.4 and Visual Studio Community 2017 and is only working since ViSP 3.0.1.

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section tutorial_install_msvc15_uwp_required Install required software

- CMake that could be download at : http://www.cmake.org. Download the latest release for Windows win64-x64 platform (at the time this tuto was written it was the file \c cmake-3.9.4-win64-x64.msi). To install just double click on the msi file.
- <a href="https://www.visualstudio.com/downloads/">Visual Studio Community 2017</a>. Make sure that the Universal Windows App Development Tools are selected from the optional features list. Without these tools, you won't be able to create your universal apps. After the installation, start Visual Studio and create an empty C++ project to install the common tools for Visual C++ 2017.

\note If you have already Visual Studio 2017 installed and don't know if the Universal Windows App Development Tools are enabled see \ref install_msvc15_uwp_tips_msvc.

After installing Visual Studio software, you need to <a href="https://msdn.microsoft.com/windows/uwp/get-started/enable-your-device-for-development">enable your Windows 10 device</a> for development. 

\section install_msvc15_uwp_ws Create a workspace

First create a workspace that will contain all ViSP and optional 3rd parties. This workspace is here set to \c C:\\workspace folder, but it could be set to any other location.
To create the workspace:
- Open a \c cmd terminal (in your "Start" menu click on "Run" and type in \c cmd.exe) and run:
\code
C:\> mkdir C:\workspace
\endcode

\section install_msvc15_uwp_get_visp_source Get ViSP source code

There are different ways to get ViSP source code.

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once visp-x.y.z.tar.gz or visp-x.y.z.zip is downloaded, uncompress the file in `C:\workspace\visp\visp-x.y.z`.

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once visp-snapshot-yyyy-mm-dd.tar.gz is downloaded, uncompress the file in `C:\workspace\visp\visp-x.y.z`.

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the git command line (see \ref install_win7_tip_git):
\code
C:\> mkdir C:\workspace\visp
C:\> cd C:\workspace\visp
C:\> git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in `C:\workspace\visp\visp`. 

\section install_msvc15_uwp_build_without_opencv Build ViSP

\subsection install_msvc15_uwp_build_ws_10 Build for Windows Store 10.0

- Configure ViSP build for Windows Store 10 targeting a x86 platform, by opening a cmd terminal and running: 
\code
C:\> cd C:\workspace\visp
C:\> md visp-build-vc15-uwp-ws-10
C:\> cd visp-build-vc15-uwp-ws-10
C:\> cmake.exe -G "Visual Studio 15 2017" -DCMAKE_SYSTEM_NAME:String=WindowsStore -DCMAKE_SYSTEM_VERSION:String="10.0" -DCMAKE_VS_EFFECTIVE_PLATFORMS:String=x86 ../visp
\endcode

- To build ViSP just double click on `C:/workspace/visp/visp-build-vc15-uwp-ws-10/VISP.sln` solution file. This action will open ViSP project in Visual Studio C++.

- With Visual Studio build and install the solution. If everything goes right you will find ViSP libraries and headers in `C:/workspace/visp/visp-build-vc15-uwp-ws-10/install` folder. 

\section install_msvc15_uwp_tips Tips and tricks
\subsection install_msvc15_uwp_tips_msvc How to add Universal Windows App Development Tools support

In case you're trying to build Windows Store and Windows Phone 10.0 projects having only default Visual Studio 2017 installation you'll likely get the following error during \c cmake run:
\code
A Windows Store component with CMake requires both the Windows Desktop SDK
as well as the Windows Store '10.0' SDK. Please make sure that you have
both installed
\endcode

Resolution consists in:
- Open the Start menu ("Windows" key)
- Select "Visual Studio Installer"
- Under Visual Studio Community 2017 section, click on "Modify"
- Enable "Universal Windows App Development Tools" and "Windows 8.1 and Windows Phone 8.0/8.1 Tools"

*/
