/**

\page tutorial-install-opensuse Tutorial: Installation from source for Linux openSUSE
\tableofcontents

In this tutorial you will learn how to install ViSP from source on openSUSE. These steps have been tested for openSUSE 14.1 (x86_64) and openSUSE Leap 42.3 (x86_64) distro, but should work with any other distribution as well. 

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section install_opensuse_required Install prerequisities

- gcc 4.4.x or later. This can be installed with:
\code
$ sudo zypper install gcc-c++
\endcode
- CMake 2.6 or higher that could be installed with:
\code
$ sudo zypper install cmake
\endcode
- Git if you want to get the source code from http://github.com/lagadic/visp
\code
$ sudo zypper install git
\endcode

\section install_opensuse_3rdparty Install 3rd parties

ViSP is interfaced with several 3rd party libraries. The <a href="http://visp.inria.fr/software-architecture">complete list is provided here</a>.

\subsection install_opensuse_3rdparty_recommended Recommended 3rd parties

We recommend to install the following:

- OpenCV
\code
$ sudo zypper install opencv-devel
\endcode
- libX11 to be able to open a window to display images
\code
$ sudo zypper install libX11-devel
\endcode
- lapack and eigen to benefit from optimized mathematical capabilities
\code
$ sudo zypper install lapack-devel eigen3-devel
\endcode
- libv4l to grab images from usb or analogic cameras
\code
$ sudo zypper install libv4l-devel
\endcode
- libdc1394 to grab images from firewire cameras
\code
$ sudo zypper install libdc1394-devel
\endcode
- libxml2 to be able to configure the model-based trackers from xml files
\code
$ sudo zypper install libxml2-devel
\endcode
- libzbar to be able to detect QR codes
\code
$ sudo zypper install libzbar-devel
\endcode
- pthread library
\code
zypper install pthread-stubs
\endcode

\subsection install_opensuse_3rdparty_other Other optional 3rd parties

We give also the way to install other 3rd party libraries to enable specific capabilities.

- libjpeg and libpng to support jpeg and png images (only useful if OpenCV is not installed)
\code
$ sudo zypper install libjpeg8-devel libpng-devel
\endcode

\section install_opensuse_install_visp Install ViSP from source code
\subsection install_opensuse_ws Create a workspace

- First create a workspace in \c $HOME/visp-ws that will contain ViSP source, build and dataset.
\code
$ export VISP_WS=$HOME/visp-ws
$ mkdir -p $VISP_WS
\endcode

\subsection install_opensuse_get_source Getting ViSP source code

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once downloaded, uncompress the file using either
\code
$ tar xvzf visp-x.y.z.tar.gz -C $VISP_WS
\endcode
or
\code
$ unzip visp-x.y.z.zip -d $VISP_WS
\endcode

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once downloaded, uncompress the file using
\code
$ tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz -C $VISP_WS
\endcode

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the following command
\code
$ cd $VISP_WS
$ git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in the directory \c $VISP_WS/visp. The following should be adapted if you downloaded ViSP from a zip or tarball. In that case, the source is rather in something like \c $VISP_WS/visp-x.y.z.

\subsection install_opensuse_config Configuring ViSP from source

- In the workspace, create first a directory named \c visp-build that will contain all the build material; generated Makefiles, object files, output libraries and binaries.
\code
$ mkdir $VISP_WS/visp-build
\endcode

- Enter the \c visp-build folder and configure the build:
\code
$ cd $VISP_WS/visp-build
$ cmake ../visp
\endcode
A more versatile way to configure the build is to use \c ccmake, the CMake GUI:
\code
$ ccmake ../visp
\endcode
The following image shows that this command allows to configure (just by pressing [c] key) the build in a more advanced way where some options could be easily turned ON/OFF. It allows also to see which are the 3rd parties that will be used. To generate the makefiles, just press [g] key in the ccmake gui.
\image html img-ccmake-opensuse-all.png Snapshot of the ccmake \c ../visp command used to configure ViSP.

\subsection install_opensuse_build Building ViSP libraries

- To build ViSP libraries proceed with:
\code
$ cd $VISP_WS/visp-build
$ make -j4
\endcode

\note Installing ViSP is optional, since ViSP could be used as a 3rd party without installation. To proceed with the installation run:
\code
$ cd $VISP_WS/visp-build
$ sudo make install
\endcode
\note The default install location is set to \c /usr/local. This location could be changed modifying \c CMAKE_INSTALL_PREFIX var:
\code
$ cd $VISP_WS/visp-build
$ cmake ../visp -DCMAKE_INSTALL_PREFIX=/usr
$ sudo make install
\endcode

\subsection install_opensuse_doc Building ViSP documentation

- To build ViSP documentation, you have first to install Doxygen package:
\code
$ sudo zypper install doxygen graphviz
\endcode
Then you can proceed with:
\code
$ cd $VISP_WS/visp-build
$ cmake ../visp
$ make -j4 visp_doc
\endcode
The generated documentation is then available in \c $VISP_WS/visp-build/doc/html/index\.html

- It is also possible to generate a more complete documentation that includes also all the internal classes. This could be achieved setting CMake var \c ENABLE\_FULL\_DOC to \c ON like:
\code
$ cmake ../visp -DENABLE_FULL_DOC=ON
$ make -j4 visp_doc
\endcode

\section install_opensuse_dataset Install ViSP dataset
- Some ViSP examples and tests require data (images, video, models) that are not part of ViSP source code but available in a separate archive named \c visp-images-x.y.z.zip. This archive could be downloaded from http://visp.inria.fr/download page. We provide here after the way to install these data if you want to run ViSP examples.
\code
$ unzip visp-images-3.1.0.zip -d $VISP_WS
\endcode

- We suppose now that the data are located in \c $VISP_WS/visp-images-3.1.0.
\code
$ ls $VISP_WS/visp-images-3.1.0
AprilTag     circle   ellipse    iv     LICENSE.txt  mbt    mire-2     video
calibration  cube     ellipse-1  Klimt  line         mire   README.md  
\endcode

- Set \c VISP_INPUT_IMAGE_PATH environment variable to help ViSP examples and tests to find the location of the data set. It is more convenient if this environment variables is automatically added to your bash session every time a new shell is launched: 
\code
$ echo "export VISP_WS=$HOME/visp-ws" >> ~/.bashrc
$ echo "export VISP_INPUT_IMAGE_PATH=$VISP_WS/visp-images-3.1.0" >> ~/.bashrc
$ source ~/.bashrc
\endcode

- From now, you can try to run ViSP examples and tests. For example you can run \c displayX example that should open a windows with Klimt painting image and some overlay drawings:
\code
$ cd $VISP_WS/visp-build
$ ./example/device/display/displayX

A click to close the windows...

A click to display a cross...
Cross position: 201, 441

A click to exit the program...
Bye
\endcode

\section install_opensuse_tips Tips and tricks

\subsection install_opensuse_tips_uninstall How to uninstall ViSP
- After ViSP installation, you can remove installed material using:
\code
$ cd $VISP_WS/visp-build
$ sudo make uninstall
\endcode

\subsection install_opensuse_tips_modules How to build only ViSP libraries

- If you want to build only ViSP modules libraries, nor the examples, tutorials and tests:
\code
$ cd $VISP_WS/visp-build
$ make -j4 visp_modules
\endcode

\subsection install_opensuse_tips_module_once How to build a ViSP specific module

- If you want to build a given module and all the dependencies:
\code
$ cd $VISP_WS/visp-build
$ make -j4 visp_<module_name>
\endcode
For example to build the model-based tracker module named mbt, run:
\code
$ cd $VISP_WS/visp-build
$ make -j4 visp_mbt
\endcode

\subsection install_opensuse_tips_target Which are the targets that could be run with make ?

- To know which are the target available with \c make:
\code
$ make help | grep visp
... visp_tests
... visp_modules
... visp_examples
... visp_demos
... visp_tutorials
... visp_clipper
... visp_apriltag
... visp_core
... visp_gui
... visp_imgproc
... visp_io
... visp_klt
... visp_me
... visp_sensor
... visp_ar
... visp_blob
... visp_robot
... visp_visual_features
... visp_vs
... visp_vision
... visp_detection
... visp_mbt
... visp_tt
... visp_tt_mi
\endcode

\subsection install_opensuse_tips_3rd_party Which are the 3rd party libraries that are used in ViSP ?

- To see which are the optional 3rd parties that are found during the configuration stage and that will be used by ViSP during the build you can have a look to the text file named \c ViSP-third-party.txt and located in \c $VISP_WS/visp-build. We provide hereafter an example of a possible content of this file that contains also build info.
\code
$ cat $VISP_WS/visp-build/ViSP-third-party.txt
==========================================================
General configuration information for ViSP 3.1.0

  Version control:               3.0.1-346-g22ae3e680

  Platform:
    Timestamp:                   2017-09-27T13:18:49Z
    Host:                        Linux 4.4.76-1-default x86_64
    CMake:                       3.5.2
    CMake generator:             Unix Makefiles
    CMake build tool:            /usr/bin/gmake
    Configuration:               Release

  C/C++:
    Built as dynamic libs?:      yes
    C++ Compiler:                /usr/bin/c++  (ver 4.8.5)
    C++ flags (Release):         -Wall -Wextra -fopenmp -fvisibility=hidden -msse2 -msse3 -mssse3 -fPIC -O3 -DNDEBUG
    C++ flags (Debug):           -Wall -Wextra -fopenmp -fvisibility=hidden -msse2 -msse3 -mssse3 -fPIC -g
    C Compiler:                  /usr/bin/cc
    C flags (Release):           -Wall -Wextra -fopenmp -fvisibility=hidden -msse2 -msse3 -mssse3 -fPIC -O3 -DNDEBUG
    C flags (Debug):             -Wall -Wextra -fopenmp -fvisibility=hidden -msse2 -msse3 -mssse3 -fPIC -g
    Linker flags (Release):
    Linker flags (Debug):

  ViSP modules:
    To be built:                 core gui io klt me sensor ar blob robot visual_features vs vision detection mbt tt tt_mi
    Disabled:                    -
    Disabled by dependency:      -
    Unavailable:                 -

  Build options: 
    Build deprecated:            yes
    Build with moment combine:   no

  Mathematics: 
    Use Lapack/blas:             yes (ver n/a)
    Use Lapack (built-in):       no
    Use Eigen3:                  yes (ver 3.2.9)
    Use OpenCV:                  yes (ver 3.1.0)
    Use GSL:                     no

  Simulator: 
    Ogre simulator: 
    \- Use Ogre3D:               no
    \- Use OIS:                  no
    Coin simulator: 
    \- Use Coin3D:               no
    \- Use SoWin:                no
    \- Use SoXt:                 no
    \- Use SoQt:                 no
    \- Use Qt4:                  no
    \- Use Qt3:                  no

  Media I/O: 
    Use JPEG:                    no
    Use PNG:                     no
    \- Use ZLIB:                 yes (ver 1.2.8)
    Use OpenCV:                  yes (ver 3.1.0)

  Real robots: 
    Use Afma4:                   no
    Use Afma6:                   no
    Use Viper650:                no
    Use Viper850:                no
    Use aria (Pioneer):          no
    Use PTU46:                   no
    Use Biclops PT:              no

  GUI: 
    Use X11:                     yes
    Use GTK:                     no
    Use OpenCV:                  yes (ver 3.1.0)
    Use GDI:                     no
    Use Direct3D:                no

  Cameras: 
    Use DC1394-2.x:              yes (ver 2.2.3)
    Use CMU 1394:                no
    Use V4L2:                    yes (ver 1.8.0)
    Use directshow:              no
    Use OpenCV:                  yes (ver 3.1.0)
    Use Flycapture:              no
    Use Pylon:                   no

  RGB-D sensors: 
    Use Realsense:               no
    \- Use PCL:                  no
       \- Use VTK:               no
    Use Kinect:                  no
    \- Use libfreenect:          no
    \- Use libusb-1:             no
    \- Use pthread:              yes

  F/T sensors: 
    Use atidaq (built-in):       no
    Use comedi:                  no

  Detection: 
    Use zbar:                    yes (ver 0.10)
    Use dmtx:                    no
    Use AprilTag (built-in):     yes (ver 0.9.8)

  Misc: 
    Use Clipper (built-in):      yes (ver 6.4.2)
    Use XML2:                    yes (ver 2.9.4)

  Optimization: 
    Use OpenMP:                  yes
    Use pthread:                 yes
    Use pthread (built-in):      no
    Use cxx11:                   no

  Documentation: 
    Use doxygen:                 no

  Tests and samples:
    Tests:                       yes
    Demos:                       yes
    Examples:                    yes
    Tutorials:                   yes

  Install path:                  /usr/local

==========================================================
\endcode

\section install_opensuse_issues Known issues
\subsection install_opensuse_issues_libjpeg libjpeg.so.8 may conflict with libjpeg.so.62

- Note that with openSUSE 12.04 but also with 13.02, \c libjpeg-devel package lead to \c libjpeg62.so installation, that may conflict with \c libjpeg8.so that is also installed. That's why we recommend to not install \c libjpeg-devel, but rather install \c libjpeg8-devel.
\code
Linking CXX executable HelloWorld
/usr/lib64/gcc/x86_64-suse-linux/4.8/../../../../x86_64-suse-linux/bin/ld: warning: libjpeg.so.8, needed by /usr/lib64/libopencv_highgui.so.2.4.9, may conflict with libjpeg.so.62
\endcode 

\section install_opensuse_next Next tutorial

You are now ready to see the next \ref tutorial-getting-started that will show you how to use ViSP as a 3rd party to build your own project.

*/
