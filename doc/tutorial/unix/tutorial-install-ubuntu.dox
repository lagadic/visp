/**

\page tutorial-install-ubuntu Tutorial: Installation from source for Linux Ubuntu or Debian
\tableofcontents

In this tutorial you will learn how to install ViSP from source on Linux Ubuntu. These steps have been tested with
Ubuntu 16.04 64bits LTS, 17.04 64bits, 18.04 64bits LTS, 18.10 64bits 20.04 64bits LTS and Debian 9.6.0 64bits
distributions, but should work with any other distribution as well.

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section install_ubuntu_required Install prerequisites

Prior to build and install ViSP from source, you may install GNU g++ compiler, CMake, git and subversion.
This can be achieved running:
\verbatim
$ sudo apt-get install build-essential cmake-curses-gui git subversion wget
\endverbatim

\section install_ubuntu_ws Create a workspace

First create a workspace that will contain all ViSP source, build, data set and optional 3rd parties.
This workspace is here set to `$HOME/visp-ws` folder, but it could be set to any other location.

In a terminal, run:
\verbatim
$ echo "export VISP_WS=$HOME/visp-ws" >> ~/.bashrc
$ source ~/.bashrc
$ mkdir -p $VISP_WS
\endverbatim

\section install_ubuntu_quick Quick ViSP installation

In this section, we give minimal instructions to build ViSP from source just to try ViSP without entering in \ref install_ubuntu_advanced.

- Install a small number of recommended 3rd parties

  - Since Ubuntu 20.04 or Debian 11
  \verbatim
  $ sudo apt-get install libopencv-dev libx11-dev liblapack-dev libeigen3-dev libv4l-dev \
    libzbar-dev libpthread-stubs0-dev libdc1394-dev nlohmann-json3-dev
  \endverbatim

  - On older Ubuntu or Debian distros
  \verbatim
  $ sudo apt-get install libopencv-dev libx11-dev liblapack-dev libeigen3-dev libv4l-dev \
    libzbar-dev libpthread-stubs0-dev libdc1394-22-dev
  \endverbatim

- Get ViSP source code
\verbatim
$ cd $VISP_WS
$ git clone https://github.com/lagadic/visp.git
\endverbatim

- Create a build folder and build ViSP
\verbatim
$ mkdir -p $VISP_WS/visp-build
$ cd $VISP_WS/visp-build
$ cmake ../visp
$ make -j$(nproc)
\endverbatim

- Set `VISP_DIR` environment variable
\verbatim
$ echo "export VISP_DIR=$VISP_WS/visp-build" >> ~/.bashrc
$ source ~/.bashrc
\endverbatim

To have a trial, just jump to \ref install_ubuntu_dataset before running some binaries that you just build or jump to
\ref install_ubuntu_next. You can later come back to the \ref install_ubuntu_advanced.

\section install_ubuntu_advanced Advanced ViSP installation

\subsection install_ubuntu_3rdparty Install 3rd parties

ViSP is interfaced with several optional 3rd party libraries.
Follow the link to see the complete list of \ref supported-third-parties.

\note ViSP can be used without any third-party since all of them are optional. But obviously in this case, as we do
not want to reinvent the wheel, some features implemented in third-party libraries will not be exploitable through ViSP.
It is therefore possible to skip in a first time this section and start directly to \ref install_ubuntu_quick. Later,
if you realize that a third-party library is missing, you can still install it, go back to the build folder,
configure ViSP with CMake to detect the newly installed third-party library and build ViSP again as explained
in \ref install_ubuntu_tips_new_3rdparty.

\subsubsection install_ubuntu_3rdparty_recommended Recommended 3rd parties

We recommend to install the following 3rd parties:

- OpenCV
- libX11 to be able to open a window to display images
- lapack and eigen to benefit from optimized mathematical capabilities
- libdc1394 to grab images from firewire cameras
- libv4l to grab images from usb or analogic cameras
- libzbar to be able to detect QR codes
- pthread library
- <a href="https://json.nlohmann.me/">JSON for modern C++</a> if you wish to save or load JSON representations of ViSP objects

Installation of recommended 3rd parties could be performed running:

- Since Ubuntu 20.04 or Debian 11
\verbatim
$ sudo apt-get install libopencv-dev libx11-dev liblapack-dev libeigen3-dev libv4l-dev libzbar-dev \
  libpthread-stubs0-dev libdc1394-dev nlohmann-json3-dev
\endverbatim
- On older Ubuntu or Debian distros
\verbatim
$ sudo apt-get install libopencv-dev libx11-dev liblapack-dev libeigen3-dev libv4l-dev libzbar-dev \
  libpthread-stubs0-dev libdc1394-22-dev
\endverbatim

Note that on older distributions, the apt package for the JSON library is outdated. If needed, you may install \ref soft_tool_json from source.

\subsubsection install_ubuntu_3rdparty_realsense librealsense 2.x 3rd party

If you have an Intel RealSense Depth camera (SR300 or D400 series), you may install librealsense 2.x in order to use vpRealSense2 class.
Otherwise you can skip this section.

Installation instructions are given in the <a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/installation.md">tutorial</a>.

\note Since our kernel is 4.12+ streaming Depth/IR/Color is supported and is provided out of the box. This means that the patches are not needed.

Following the <a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/installation.md">tutorial</a>, we recall the main steps here:

1. Unplug any connected Intel RealSense camera.

2. Install the packages required for `librealsense` build:
\verbatim
$ sudo apt-get install git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev cmake-curses-gui
$ sudo apt-get install libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev
\endverbatim

3. Get `librealsense` from github:
\verbatim
$ mkdir -p $VISP_WS/3rdparty
$ cd $VISP_WS/3rdparty
$ git clone https://github.com/IntelRealSense/librealsense.git
$ cd librealsense
\endverbatim

4. Run Intel Realsense permissions script located in `librealsense` root directory:
\verbatim
$ sudo ./scripts/setup_udev_rules.sh
\endverbatim

5. Build and install librealsense
\verbatim
$ mkdir build
$ cd build
$ cmake .. -DBUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=Release
$ make -j4
$ sudo make install
\endverbatim

6. Connect your Realsense camera (we are using a D435) and check if you are able to acquire images running:
\verbatim
$ ./examples/capture/rs-capture
\endverbatim

If you are able to visualize the images, it means that you succeed in `librealsense` installation.

\subsubsection install_ubuntu_3rdparty_occipital_structure libStructure 3rd party

If you have an Occipital Structure Core sensor (monochrome or color), you may install Occipital Structure SDK in order to use vpOccipitalStructure class.
Otherwise you can skip this section.

Occipital Structure SDK contains `libStructure` pre-built library.

<b>1. To install this SDK</b>
- Go to https://developer.structure.io/sdk/
- Join the Developper program to be able to download the SDK.
- Retrieve your invitation from https://developer.structure.io/sdk/retrieve
- You'll then receive an email containing the link to the download page,
- Download `Structure SDK (Cross-Platform)`.
- Extract the folder `StructureSDK-CrossPlatform-0.9` from the downloaded file to the already created directory in `$VISP_WS`.

The SDK contains pre-built libraries for Linux, Windows and macOS.
In order that ViSP detects Structure SDK header files and libraries, you have to set `OCCIPITAL_STRUCTURE_DIR` environment
variable. Proceed as follows:
\verbatim
$ echo "export OCCIPITAL_STRUCTURE_DIR=$VISP_WS/StructureSDK-CrossPlatform-0.9" >> ~/.bashrc
$ source ~/.bashrc
\endverbatim

<b>2. Optionally build Occipital Structure SDK samples</b>

As explained in `$VISP_WS/StructureSDK-CrossPlatform-0.9/Documentation/linux.html` you can optionally
follow these steps to build sample applications provided with the SDK:
\verbatim
$ sudo $OCCIPITAL_STRUCTURE_DIR/DriverAndFirmware/Linux/Install-CoreDriver-Udev-Linux.sh
$ cd $OCCIPITAL_STRUCTURE_DIR
$ mkdir build
$ cd build
$ cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
$ make Samples
\endverbatim

After completion, sample apps may be run from the Apps directory.

\subsubsection install_ubuntu_3rdparty_flycapture FlyCapture 3rd party

FlyCapture is the SDK provided by [FLIR (previously Point Grey)](https://www.ptgrey.com/) to work with
FLIR USB 2.0, USB 3.0, Gigabit Ethernet or FireWire cameras. If you have such a camera, once FlyCapture is installed
you may use vpFlyCapture class. Otherwise you can skip this section.

1. Download FlyCapture2 SDK from the [FLIR Downloads](https://www.flir.com/support-center/iis/machine-vision/downloads/spinnaker-sdk-flycapture-and-firmware-download/)
web page. You will need a downloads account to access the Download links.

2. Unpack the software in a temporary directory.

3. Follow instructions provided in `README` file to install required dependencies (`libraw1394-11`, `libgtkmm-2.4-dev`,
`libglademm-2.4-dev`, `libgtkglextmm-x11-1.2-dev`, `libusb-1.0`). For example, for Ubuntu 18.04 run:

        $ sudo apt-get install libraw1394-11 libavcodec57 libavformat57  \
          libswscale4 libswresample2 libavutil55 libgtkmm-2.4-1v5        \
          libglademm-2.4-1v5 libgtkglextmm-x11-1.2-0v5 libgtkmm-2.4-dev  \
          libglademm-2.4-dev libgtkglextmm-x11-1.2-dev libusb-1.0-0

4. Run the install script in the same directory into which you unpacked the software.

        $ sudo sh install_flycapture.sh

5. Follow the instructions of the script. This installs all the FlyCapture2 libraries, example code, sample applications,
and documentation. The script prompts you to configure udev so that devices can be used by a particular user. If you choose
to configure devices, the script changes permissions on the nodes by overwriting the default Ubuntu permissions and giving
the user full read and write access to the device nodes.

6. Restart your computer for the user permissions to take effect.

\subsubsection install_ubuntu_3rdparty_pylon Pylon 3rd party

The Pylon Camera Software Suite is a collection of drivers and tools for operating any [Basler camera](https://www.baslerweb.com/en/)
(IEEE1394, Camera Link, GigE or USB3.0 interface). If you don't have a Basler camera you can skip this section.

To install Pylon, visit [Basler Software Download](https://www.baslerweb.com/en/support/downloads/software-downloads/) page
to download and install the SDK corresponding to your platform.

Pylon Camera Software Suite installation enables vpPylonGrabber class usage.

\subsubsection install_ubuntu_3rdparty_ueye IDS uEye 3rd party

If you have an [IDS](https://en.ids-imaging.com/) camera you may install IDS Software Suite for uEye cameras. To this end:
- enter the [download area](https://en.ids-imaging.com/downloads.html)
- select `"uEye industrial cameras"`
- in the `"Firmware"` tab, select `"uEye (IDS Software Suite)"` and press `"SHOW"` button
- in the `"Operating system"` tab select `"Linux"` or `"Linux ARM"` and press the search button
- in the `"Software package"` section you should see the last `"IDS Software Suite"` version you may download.
  At the time this tutorial was written, we downloaded `"IDS Software Suite 4.95 for Linux 64-bit - archive file"` version.

Once downloaded, you may unzip the archive
\verbatim
$ unzip ids-software-suite-linux-64-4.95-archive.zip
\endverbatim

and proceed to the installation running:
\verbatim
$ sudo sh ./ueye_*.run
\endverbatim

\note At this point if the installer detects that a version of this driver is already installed:
\verbatim
$ sudo sh ./ueye_*.run
4.95.0.1134
...
Error: There is an old version of this driver installed. Please uninstall first.
\endverbatim
you need to uninstall the old version running:
\verbatim
$ sudo /usr/bin/ueyesetup -r all
\endverbatim
Now, you should be able to proceed to the installation running:
\verbatim
$ sudo sh ./ueye_*.run
\endverbatim

Documentation is available in `/opt/ids/ueye/manual/en/index.html`.

To test the Sofware Suite installation, plug a camera and run `ueyedemo` binary.
\verbatim
$ ueyedemo
\endverbatim

\note If you get the following error that occurred in our case with IDS Software Suite 4.95 and Ubuntu 18.04:
\verbatim
$ ueyedemo
ueyedemo: error while loading shared libraries: libomp.so.5: cannot open shared object file: No such file or directory
\endverbatim
you may install libomp5 running:
\verbatim
$ sudo apt install libomp5
\endverbatim
Now you should be able to run `ueyedemo`:
\verbatim
$ ueyedemo
\endverbatim

IDS uEye Camera Software Suite installation enables vpUeyeGrabber class usage.

\subsubsection install_ubuntu_3rdparty_franka libfranka 3rd party

I you have a Panda robot from Franka Emika, you may install libfranka in order to use vpRobotFranka class. Otherwise you can skip this section.

Installation instructions are provided following \ref franka_prereq_libfranka. There is also the \ref tutorial-franka-pbvs that explains
how to install a real-time Linux kernel requested to control the robot by \ref franka_prereq_rt_linux.

\subsubsection install_ubuntu_3rdparty_jaco Kinova Jaco 3rd party

If you have a
[Kinova Jaco](https://www.kinovarobotics.com/en/products/assistive-technologies/kinova-jaco-assistive-robotic-arm)
assistive robotic arm, it could be useful to install the corresponding Gen2 SDK to be able to use vpRobotKinova class.
This class is an interface over Kinova Jaco Gen2 SDK and allows to control
Gen2 4, 6 and 7 DoF [arm](https://www.kinovarobotics.com/en/resources/gen2-technical-resources).

To install Kinova Jaco SDK:

- [Download](https://www.kinovarobotics.com/en/resources/gen2-technical-resources) the Gen2 SDK.
At the time this tutorial was written, we downloaded Gen2 SDK 1.5.1 that comes in `PS 0000 0009_1.5.1.zip` (254M).
- Extract the zip content in a temporary folder like `/tmp/kinova-jaco`
- Enter `Ubuntu/<version>/64 bits` folder and run the installer:
\verbatim
$ cd /tmp/kinova-jaco
$ cd Ubuntu/16_04/64 bits
$ sh ./installSDK64.sh
\endverbatim
- After installation, the Gen2 SDK is available in `/opt/JACO-SDK`

\subsubsection install_ubuntu_3rdparty_ur_rtde ur_rtde 3rd party

If you have an [Universal Robots](https://www.universal-robots.com/products/) collaborative robot you may install [ur_rtde](https://sdurobotics.gitlab.io/ur_rtde/).
See how to \ref ur_prereq_ur_rtde instructions to enable vpRobotUniversalRobots class usage.

\subsubsection install_ubuntu_3rdparty_qualisys Qualisys Mocap 3rd party

If you have the [Qualisys](https://www.qualisys.com) Motion Capture System you can optionally install
[qualisys_cpp_sdk](https://github.com/qualisys/qualisys_cpp_sdk) from source to enable vpMocapQualisys usage.

\verbatim
$ mkdir -p $VISP_WS/3rdparty/qualisys
$ cd $VISP_WS/3rdparty/qualisys
$ git clone https://github.com/qualisys/qualisys_cpp_sdk.git
$ cd qualisys_cpp_sdk
$ mkdir build
$ cd build
$ cmake .. -DBUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-fPIC
$ make -j$(nproc)
$ sudo make install
\endverbatim

After installation the SDK is available in `/usr/local` and will be detected by ViSP if you run
a new CMake configuration step over ViSP source code.

\subsubsection install_ubuntu_3rdparty_vicon Vicon Mocap 3rd party

If you have the [Vicon](https://www.vicon.com) Motion Capture System you can optionally install
[Vicon Datastream SDK](https://www.vicon.com/software/datastream-sdk/) to enable vpMocapVicon usage.

<b>1. Get Vicon Datastream SDK</b>

- Download latest Vicon Datastream SDK from [here](https://www.vicon.com/software/datastream-sdk/?section=downloads).
At the time this tutorial was written, we donwloaded `ViconDataStreamSDK_1.11.0_128037.zip`.
- Unzip SDK for Linux:
\verbatim
$ mkdir -p $VISP_WS/3rdparty/vicon
$ cd $VISP_WS/3rdparty/vicon
$ mv ~/Downloads/ViconDataStreamSDK_1.1*.zip .
$ unzip ViconDataStreamSDK_1.*.zip
$ unzip ViconDataStreamSDK_1.*_Linux64.zip
\endverbatim

After installation the SDK is available in `$VISP_WS/3rdparty/vicon/Linux64`.

<b>2. Setup for usage</b>

To help ViSP to detect the location of Vicon Datastream SDK you will need to setup the following environment var:

\verbatim
$ export VICON_DIR=$VISP_WS/3rdparty/vicon/Linux64
\endverbatim
\note This can also be done during ViSP cmake configuration like:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp -DVICON_DIR=$VISP_WS/3rdparty/vicon/Linux64
\endverbatim

<b>3. Known issue</b>

If you encounter the following warning during ViSP cmake configuration:
\verbatim
$ cmake ../visp
CMake Warning at cmake/VISPUtils.cmake:790 (add_library):
  Cannot generate a safe linker search path for target visp_sensor because
  files in some directories may conflict with libraries in implicit
  directories:

    link library [libboost_system.so] in /usr/lib/x86_64-linux-gnu may be hidden by files in:
      $VISP_WS/3rdparty/vicon/Linux64
\endverbatim
it means that boost is installed as a system library and that it has a version that differs from the one
that comes with Vicon Datastream SDK that is in `$VISP_WS/3rdparty/vicon/Linux64`.

The best to fix this is simply force boost usage from system package by removing the version that comes with the SDK:
\verbatim
$ cd $VISP_WS/3rdparty/vicon/Linux64
$ rm libboost_*.so
\endverbatim
and then launch a new ViSP cmake configuration:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp -DVICON_DIR=$VISP_WS/3rdparty/vicon/Linux64
\endverbatim

\subsubsection install_ubuntu_3rdparty_other Other optional 3rd parties

We give also the way to install other 3rd party libraries to enable specific capabilities.

- If you have an Intel Realsense RGB-D camera (R200, F200, LR200, RZ300) you may install librealsense 1.12.1 following
  these <a href="https://github.com/IntelRealSense/librealsense/blob/v1.12.1/doc/installation.md">installation instructions</a>.
- You may also install PCL library using:
\verbatim
$ sudo apt-get install libpcl-dev
\endverbatim
- Coin, to be able to support vrml cad model used by the model-based trackers. If you are using Ubuntu 19.04 or a more recent version use
\verbatim
$ sudo apt-get install libcoin-dev
\endverbatim
otherwise use rather:
\verbatim
$ sudo apt-get install libcoin80-dev
\endverbatim
- libjpeg and libpng to support jpeg and png images respectively (only useful if OpenCV is not installed)
\verbatim
$ sudo apt-get install libjpeg-dev libpng-dev
\endverbatim
- Ogre 3D if you want to do augmented reality or simulation
\verbatim
$ sudo apt-get install libogre-1.9-dev libois-dev
\endverbatim
- Datamatrix code detection
\verbatim
$ sudo apt-get install libdmtx-dev
\endverbatim
- Gnu Scientific Library for addtional mathematics capabilities
\verbatim
$ sudo apt-get install libgsl-dev
\endverbatim
- JSON for modern C++
\verbatim
$ sudo apt-get install nlohmann-json3-dev
\endverbatim

\subsection install_ubuntu_visp_get_source Get ViSP source code

There are different ways to get ViSP source code:

- You can download the <a href="https://visp.inria.fr/download">latest release</a> as a zip or a tarball.
  Once downloaded, uncompress the file using either
\verbatim
$ tar xvzf visp-x.y.z.tar.gz -C $VISP_WS
\endverbatim
or
\verbatim
$ unzip visp-x.y.z.zip -d $VISP_WS
\endverbatim

- You can also download a <a href="https://visp.inria.fr/download#snapshot">daily snapshot</a>.
  Once downloaded, uncompress the file using
\verbatim
$ tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz -C $VISP_WS
\endverbatim

- Or you get the cutting-edge ViSP from [GitHub repository](https://github.com/lagadic/visp) using the following command
\verbatim
$ cd $VISP_WS
$ git clone https://github.com/lagadic/visp.git
\endverbatim

We suppose now that ViSP source is in the directory `$VISP_WS/visp`. The following should be adapted if you downloaded
ViSP from a zip or tarball. In that case, the source is rather in something like `$VISP_WS/visp-x.y.z`.

\subsection install_ubuntu_visp_config Configure ViSP from source

These are the steps to configure ViSP from source with CMake:

- In the workspace, create first a directory named `visp-build` that will contain all the build material; generated Makefiles,
  object files, output libraries and binaries.
\verbatim
$ mkdir $VISP_WS/visp-build
\endverbatim

- Enter the `visp-build` folder and configure the build:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp
\endverbatim
A more versatile way to configure the build is to use `ccmake`, the CMake GUI:
\verbatim
$ ccmake ../visp
\endverbatim
The following image shows that this command allows to configure (just by pressing [c] key) the build in a more advanced
way where some options could be easily turned ON/OFF. It allows also to see which are the 3rd parties that will be used.
To generate the makefiles, just press [g] key in the ccmake gui.
\image html img-ccmake-ubuntu-all.png Snapshot of the `ccmake ../visp` command used to configure ViSP.

\subsection install_ubuntu_visp_build Build ViSP libraries

To build ViSP libraries proceed with:
\verbatim
$ cd $VISP_WS/visp-build
$ make -j$(nproc)
\endverbatim

\subsection install_ubuntu_visp_doc Build ViSP documentation

To build ViSP documentation, you have first to install Doxygen package:
\verbatim
$ sudo apt-get install doxygen graphviz texlive-latex-base
\endverbatim

Since Ubuntu 22.04, to render Latex formula you need also to install `texlive-latex-extra` package:
\verbatim
$ sudo apt install texlive-latex-extra
\endverbatim

Then you can proceed with:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp
$ make -j$(nproc) visp_doc
\endverbatim
The generated documentation is then available in `$VISP_WS/visp-build/doc/html/index.html`

\note
- To speed up generating online doc, particularly around formula rendering, you can use [MatJax](https://www.mathjax.org).
  To this end, install MathJax and build doc using:
\verbatim
$ npm install mathjax
$ cmake ../visp -DUSE_MATHJAX=ON
$ make -j$(nproc) visp_doc
\endverbatim
\note
- It is also possible to generate a more complete documentation that includes also all the internal classes.
  This could be achieved setting CMake var `ENABLE_FULL_DOC` to `ON` like:
\verbatim
$ cmake ../visp -DENABLE_FULL_DOC=ON
$ make -j$(nproc) visp_doc
\endverbatim

\subsection install_ubuntu_visp_dir Set VISP_DIR environment var

In order to ease ViSP detection by CMake when ViSP is used as a 3rd party in an external project, like the one described
in the \ref tutorial-getting-started, you may set `VISP_DIR` environment variable with the path to the `VISPConfig.cmake` file:
\verbatim
$ echo "export VISP_DIR=$VISP_WS/visp-build" >> ~/.bashrc
$ source ~/.bashrc
\endverbatim

\section install_ubuntu_dataset Install ViSP data set

Some ViSP examples and tests require a data set that contains images, video, models that is not part of ViSP source code.
This data set is available in Github (https://github.com/lagadic/visp-images) or as a release in a separate archive named `visp-images-x.y.z.zip`.
This archive could be downloaded from https://visp.inria.fr/download page. Note that ViSP tutorials are not using ViSP data set.

We give hereafter the two ways to get this data set:

<b>1. Get data set release</b>

- Download `visp-images-3.6.0.zip` from https://visp.inria.fr/download and uncompress it in your workspace `%%VISP_WS%`:
\verbatim
$ unzip ~/Downloads/visp-images-3.6.0.zip -d $VISP_WS
\endverbatim
- We suppose now that the data are located in `$VISP_WS/visp-images-3.6.0`.
\verbatim
$ ls $VISP_WS/visp-images-3.6.0
3dmodel          README.md    ellipse     mbt        video
AprilTag         Solvay       ellipse-1   mbt-cao    warp
Bayer            calibration  endianness  mbt-depth  xml
Gaussian-filter  circle       faces       memorial
Klimt            cube         iv          mire
LICENSE.txt      dnn          line        mire-2
\endverbatim
- Once downloaded, you need to set `VISP_INPUT_IMAGE_PATH` environment variable to help ViSP examples and tests to detect
  automatically the location of the requested data. In our case, this variable should be set to `$VISP_WS/visp-images-3.6.0`.
  It is more convenient if this environment variables is automatically added to your bash session every time a new shell is launched:
\verbatim
$ echo "export VISP_INPUT_IMAGE_PATH=$VISP_WS/visp-images-3.6.0" >> ~/.bashrc
$ source ~/.bashrc
\endverbatim

<b>2. Get data set from github</b>

- Use git to get the data set latest version:
\verbatim
C:\> cd $VISP_WS
C:\> git clone https://github.com/lagadic/visp-images.git
\endverbatim
- Once cloned, you need to set `VISP_INPUT_IMAGE_PATH` environment variable to help ViSP examples and tests to detect automatically
  the location of the requested data. In our case, this variable should be set to `$VISP_WS%/visp-images`. In a shell run:
\verbatim
$ echo "export VISP_INPUT_IMAGE_PATH=$VISP_WS/visp-images" >> ~/.bashrc
$ source ~/.bashrc
\endverbatim

<b>Test data set usage</b>

- From now, you can try to run ViSP examples and tests. For example you can run `displayX` example that should open a windows with
  Klimt painting image and some overlay drawings:
\verbatim
$ cd $VISP_WS/visp-build
$ ./example/device/display/displayX

A click to close the windows...

A click to display a cross...
Cross position: 201, 441

A click to exit the program...
Bye
\endverbatim

\section install_ubuntu_tips Tips and tricks

\subsection install_ubuntu_tips_new_3rdparty How to take into account a newly installed 3rd party

Since all 3rd parties are optional you may have started to install only some of them. Imagine that you just installed a new third-party,
or that you upgraded the version of this 3rd party. The next step is to go back to the build folder, configure ViSP with CMake to detect
the newly installed third-party library and build again ViSP. This could be achieved with:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp
\endverbatim

Here you can check the content of the `ViSP-third-party.txt` file and see if the newly installed 3rd party is well detected
(see \ref install_ubuntu_tips_3rd_party).

Finally, you need to rebuild ViSP with:
\verbatim
$ make -j$(nproc)
\endverbatim

\subsection install_ubuntu_tips_install How to install ViSP

Installing ViSP is optional and not recommended, since ViSP could be used as a 3rd party without installation.
If you still want to proceed with the installation run:
\verbatim
$ cd $VISP_WS/visp-build
$ sudo make install
\endverbatim
\note The default install location is set to `/usr/local`. This location could be changed modifying `CMAKE_INSTALL_PREFIX` var:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp -DCMAKE_INSTALL_PREFIX=/usr
$ make -j$(nproc)
$ sudo make install
\endverbatim

\note If you proceed to ViSP installation in a system folder like `/usr` or `/usr/local` there is no need
to \ref install_ubuntu_visp_dir that helps CMake to find ViSP libraries in an external project that uses ViSP as a 3rd party.
If you rather install ViSP in a non "standard" folder, let say `/my/install/folder`, you have to set `VISP_DIR`
to `/my/install/folder/lib/cmake/visp` that contains the `VISPConfig.cmake` file:
\verbatim
$ cd $VISP_WS/visp-build
$ cmake ../visp -DCMAKE_INSTALL_PREFIX=/my/install/folder
$ make -j$(nproc)
$ sudo make install
$ echo "export VISP_DIR=/my/install/folder/lib/cmake/visp" >> ~/.bashrc
$ source ~/.bashrc
\endverbatim

\subsection install_ubuntu_tips_uninstall How to uninstall ViSP
After ViSP installation, you can remove installed material using:
\verbatim
$ cd $VISP_WS/visp-build
$ sudo make uninstall
\endverbatim

\subsection install_ubuntu_tips_modules How to build only ViSP libraries

If you want to build only ViSP modules libraries, nor the examples, tutorials and tests:
\verbatim
$ cd $VISP_WS/visp-build
$ make -j$(nproc) visp_modules
\endverbatim

\subsection install_ubuntu_tips_module_once How to build a ViSP specific module

If you want to build a given module and all the dependencies:
\verbatim
$ cd $VISP_WS/visp-build
$ make -j$(nproc) visp_<module_name>
\endverbatim

For example to build the model-based tracker module named mbt, run:
\verbatim
$ cd $VISP_WS/visp-build
$ make -j$(nproc) visp_mbt
\endverbatim

\subsection install_ubuntu_tips_target Which are the targets that could be run with make ?

To know which are the target available with `make`:
\verbatim
$ make help | grep visp
... visp_doc
... visp_examples
... visp_tests
... visp_modules
... visp_demos
... visp_tutorials
... visp_clipper
... visp_apriltag
... visp_qbdevice
... visp_pugixml
... visp_core
... visp_gui
... visp_imgproc
... visp_io
... gen_visp_java_source
... visp_klt
... visp_me
... visp_sensor
... visp_ar
... visp_blob
... visp_robot
... visp_visual_features
... visp_vs
... visp_vision
... visp_detection
... visp_mbt
... visp_tt
... visp_tt_mi
... visp_java
... visp_java_jar_source_copy
... visp_java_jar
\endverbatim

\subsection install_ubuntu_tips_3rd_party Which are the 3rd party libraries that are used in ViSP ?

To see which are the optional 3rd parties that are found during the configuration stage and that will be used by
ViSP during the build you can have a look to the text file named `ViSP-third-party.txt` and located in `$VISP_WS/visp-build`.
We provide hereafter an example of a possible content of this file that contains also build info.
\verbatim
$ cat $VISP_WS/visp-build/ViSP-third-party.txt
==========================================================
General configuration information for ViSP 3.3.1

  Version control:               3.2.0-1313-g31602e1f7-dirty

  Platform:
    Timestamp:                   2020-12-11T12:10:30Z
    Host:                        Linux 5.4.0-53-generic x86_64
    CMake:                       3.16.4
    CMake generator:             Unix Makefiles
    CMake build tool:            /usr/bin/make
    Configuration:               RelWithDebInfo

  C/C++:
    Built as dynamic libs?:      yes
    C++ Compiler:                /usr/bin/g++  (ver 7.5.0)
    C++ flags (Release):         -Wall -Wextra -fopenmp -std=c++11 -fvisibility=hidden -mavx -fPIC -O3 -DNDEBUG
    C++ flags (Debug):           -Wall -Wextra -fopenmp -std=c++11 -fvisibility=hidden -mavx -fPIC -g
    C Compiler:                  /usr/bin/gcc
    C flags (Release):           -Wall -Wextra -fopenmp -std=c++11 -fvisibility=hidden -mavx -fPIC -O3 -DNDEBUG
    C flags (Debug):             -Wall -Wextra -fopenmp -std=c++11 -fvisibility=hidden -mavx -fPIC -g
    Linker flags (Release):
    Linker flags (Debug):

  ViSP modules:
    To be built:                 core gui imgproc io java_bindings_generator klt me sensor ar blob robot visual_features vs vision detection mbt tt tt_mi java
    Disabled:                    -
    Disabled by dependency:      -
    Unavailable:                 -

  Python (for build):            /usr/bin/python2.7

  Java:
    ant:                         /usr/bin/ant (ver 1.10.5)
    JNI:                         /home/fspindle/visp-ws/java/jdk-11.0.6/include /home/fspindle/visp-ws/java/jdk-11.0.6/include/linux /home/fspindle/visp-ws/java/jdk-11.0.6/include

  Build options:
    Build deprecated:            yes
    Build with moment combine:   no

  Mathematics:
    Blas/Lapack:                 yes
    \- Use MKL:                  no
    \- Use OpenBLAS:             yes (ver 0.2.20)
    \- Use Atlas:                no
    \- Use Netlib:               no
    \- Use GSL:                  no
    \- Use Lapack (built-in):    no
    Use Eigen3:                  yes (ver 3.3.4)
    Use OpenCV:                  yes (ver 3.2.0)

  Simulator:
    Ogre simulator:
    \- Use Ogre3D:               yes (ver 1.9.0)
    \- Use OIS:                  yes (ver 1.3.0)
    Coin simulator:
    \- Use Coin3D:               yes (ver 4.0.0)
    \- Use SoWin:                no
    \- Use SoXt:                 no
    \- Use SoQt:                 no
    \- Use Qt5:                  no
    \- Use Qt4:                  no
    \- Use Qt3:                  no

  Media I/O:
    Use JPEG:                    yes (ver 80)
    Use PNG:                     yes (ver 1.6.34)
    \- Use ZLIB:                 yes (ver 1.2.11)
    Use OpenCV:                  yes (ver 3.2.0)
    Use stb_image (built-in):    no

  Real robots:
    Use Afma4:                   no
    Use Afma6:                   no
    Use Franka:                  yes (ver 0.7.1)
    Use Viper650:                no
    Use Viper850:                no
    Use Kinova Jaco:             yes
    Use aria (Pioneer):          no
    Use PTU46:                   no
    Use Biclops PTU:             no
    Use Flir PTU SDK:            no
    Use Parrot ARSDK:            yes
    \-Use ffmpeg:                yes
    Use Virtuose:                yes
    Use qbdevice (built-in):     yes (ver 2.6.0)
    Use takktile2 (built-in):    yes (ver 1.0.0)

  GUI:
    Use X11:                     yes
    Use GTK:                     no
    Use OpenCV:                  yes (ver 3.2.0)
    Use GDI:                     no
    Use Direct3D:                no

  Cameras:
    Use DC1394-2.x:              yes (ver 2.2.5)
    Use CMU 1394:                no
    Use V4L2:                    yes (ver 1.14.2)
    Use directshow:              no
    Use OpenCV:                  yes (ver 3.2.0)
    Use FLIR Flycapture:         yes
    Use Basler Pylon:            no
    Use IDS uEye:                yes (ver 4.93.0)

  RGB-D sensors:
    Use Realsense:               no
    Use Realsense2:              yes (ver 2.36.0)
    Use Kinect:                  no
    \- Use libfreenect:          no
    \- Use libusb-1:             yes (ver 1.0.21)
    \- Use pthread:              yes
    Use PCL:                     yes (ver 1.8.1)
    \- Use VTK:                  yes (ver 6.3.0)

  F/T sensors:
    Use atidaq (built-in):       no
    Use comedi:                  no
    Use IIT SDK:                 no

  Detection:
    Use zbar:                    yes (ver 0.10)
    Use dmtx:                    yes (ver 0.7.4)
    Use AprilTag (built-in):     yes (ver 3.1.1)
    \- Use AprilTag big family:  no

  Misc:
    Use Clipper (built-in):      yes (ver 6.4.2)
    Use pugixml (built-in):      yes (ver 1.9.0)
    Use libxml2:                 yes (ver 2.9.4)

  Optimization:
    Use OpenMP:                  yes
    Use pthread:                 yes
    Use pthread (built-in):      no
    Use cxx standard:            11

  Documentation:
    Use doxygen:                 yes

  Tests and samples:
    Use catch2 (built-in):       yes (ver 2.9.2)
    Tests:                       yes
    Demos:                       yes
    Examples:                    yes
    Tutorials:                   yes

  Install path:                  /usr/local

==========================================================
\endverbatim

\section install_ubuntu_next Next tutorial

You are now ready to see the next \ref tutorial-getting-started that will show you how to use ViSP as a 3rd party to build your own project.

*/
