/**

\page tutorial-tracking-mb-stereo-deprecated Tutorial: Markerless model-based tracking with stereo cameras (deprecated)
\tableofcontents

\section mbdep_stereo_intro Introduction

\warning
This tutorial can be considered obsolete since ViSP 3.1.0 version as we have introduced a generic tracker (vpMbGenericTracker) that can replace the vpMbEdgeMultiTracker, vpMbKltMultiTracker and vpMbEdgeKltMultiTracker classes. The explanations about the multi-views model-based tracking remain valid though.

This tutorial describes the model-based tracking of object using simultaneously multiple cameras views. It allows to track the object in the images viewed by a set of cameras while providing its 3D localization. Calibrated cameras (intrinsic and extrinsic between the reference and the other cameras) are required.

The mbt ViSP module allows the tracking of a markerless object using the knowledge of its CAD model. Considered objects have to be modeled by segment, circle or cylinder primitives. The model of the object could be defined in vrml format (except for circles) or in cao (our own format).

Next section highlights the different versions of the markerless multi-view model-based trackers that have been developed. The multi-view model-based tracker can consider moving-edges (thanks to the vpMbEdgeMultiTracker class). It can also consider KLT features that are detected and tracked on each visible face of the model (thanks to the vpMbKltMultiTracker class). The tracker can also handle moving-edges and KLT features in a hybrid scheme (thanks to vpMbEdgeKltMultiTracker the class).

While the multi-view model-based edges tracker implemented in vpMbEdgeMultiTracker is appropriate to track texture-less objects (with visible edges), the multi-view model-based KLT tracker implemented in vpMbKltMultiTracker is suitable for textured objects. The multi-view model-based hybrid tracker implemented in vpMbEdgeKltMultiTracker is appropriate to track objects with texture and or with visible edges.

These classes allow the tracking of the same object assuming two or more cameras:
The main advantages of this configuration with respect to the mono-camera case (see \ref tutorial-tracking-mb-deprecated) concern:
- the possibility to extend the application field of view;
- a more robust tracking as the configuration of the stereo rig allows to track the object under multiple viewpoints and thus with more visual features.

In order to achieve this, the following information are required:
- the intrinsic parameters of each camera;
- the transformation matrix between each camera and a reference camera: \f$ ^{c_{current}}{\bf M}_{c_{reference}} \f$.

In the following sections, we consider the tracking of a tea box modeled in cao format. A stereo camera sees this object. The following video shows the tracking performed with vpMbEdgeMultiTracker. In this example ,the fixed cameras located on the Romeo Humanoid robot head captured the images.

\htmlonly
<p align="center"><iframe width="560" height="315" src="https://www.youtube.com/embed/aWXvvkeytp0" frameborder="0" allowfullscreen></iframe></p>
\endhtmlonly

This other video shows the behavior of the hybrid tracking performed with vpMbEdgeKltMultiTracker.

\htmlonly
<p align="center"><iframe width="560" height="315" src="https://www.youtube.com/embed/0poP7gONdMc" frameborder="0" allowfullscreen></iframe></p>
\endhtmlonly

\note The cameras can move, but the tracking will be effective as long as the transformation matrix between the cameras and the reference camera is known and updated at each iteration.
\note The new introduced classes are not restricted to stereo configuration. They allow the usage of multiple cameras (see \ref mbdep_stereo_moving_cameras).

Next sections will highlight how to easily adapt your code to use multiple cameras with the model-based tracker. As only the new methods dedicated to multiple views tracking will be presented, 
you are highly recommended to follow \ref tutorial-tracking-mb-deprecated in order to be familiar with the model-based tracking concepts, the different trackers that are available in ViSP (the edge tracker: vpMbEdgeTracker, the klt feature points tracker: vpMbKltTracker 
and the hybrid tracker: vpMbEdgeKltTracker) and with the configuration part.

Note that all the material (source code and video) described in this tutorial is part of ViSP source code and could be downloaded using the following command:

\code
$ svn export https://github.com/lagadic/visp.git/trunk/tutorial/tracking/model-based/old/stereo-deprecated
\endcode

\section mbdep_stereo_started Getting started

\subsection mbdep_stereo_overview Overview

The model-based trackers available for multiple views tracking rely on the same trackers than in the monocular case:
- a vpMbEdgeMultiTracker similar to vpMbEdgeTracker which tracks moving-edges corresponding to the visible lines of the model projected in the image plane at the current pose (suitable for texture-less objects).
- a vpMbKltMultiTracker similar to vpMbKltTracker which uses the optical flow information to track the object (suitable for textured objects).
- a vpMbEdgeKltMultiTracker similar to vpMbEdgeKltTracker which merges the two information (edge and texture information) for better robustness of the tracking (can deal with both types of objects).

The following class diagram offers an overview of the hierarchy between the different classes:

\image html img-mbt-multi-class-diagram-resize.jpeg Simplified class diagram.

The vpMbEdgeMultiTracker class inherits from the vpMbEdgeTracker class, the vpMbKltMultiTracker inherits from the vpMbKltTracker class and the vpMbEdgeKltMultiTracker class inherits from the 
vpMbEdgeMultiTracker and vpMbKltMultiTracker classes.
This conception permits to easily extend the usage of the model-based tracker to multiple cameras with the guarantee to preserve the same behavior compared to the tracking in the monocular configuration
(more precisely, only the model-based edge and the model-based klt should have the same behavior, the hybrid multi class has a slight different implementation that will lead to minor 
differences compared to vpMbEdgeKltTracker).

As you will see after, the principal methods present in the parent class are accessible and used for single view tracking.
Lot of new overridden methods have been introduced to deal with the different cameras configuration (single camera, stereo cameras and multiple cameras).

\subsection mbdep_stereo_implementation_detail Implementation detail

Each tracker is stored in a map, the key corresponding to the name of the camera on which the tracker will process. By default, the camera names are set to:
-  "Camera" when the tracker is constructed with one camera.
-  "Camera1" to "CameraN" when the tracker is constructed with N cameras.
-  The default reference camera will be "Camera1" in the multiple cameras case.

\image html img-multi-cameras-config.png Default name convention and reference camera ("Camera1").

To deal with multiple cameras, in the virtual visual servoing control law we concatenate all the interaction matrices and residual vectors and transform them in a single reference camera frame to compute
the reference camera velocity.
Thus, we have to know the transformation matrix between each camera and the reference camera.

For example, if the reference camera is "Camera1" (\f$ c_1 \f$), we need the following information: 
\f$ _{}^{c_2}\textrm{M}_{c_1}, _{}^{c_3}\textrm{M}_{c_1}, \cdots, _{}^{c_n}\textrm{M}_{c_1} \f$.

\subsection mbdep_stereo_interface_with_the_code Interfacing with the code

Each essential method used to initialize the tracker and process the tracking have three signatures in order to ease the call to the method and according to three working modes:
-  tracking using one camera, the signature remains the same than the previous classes (vpMbEdgeTracker, vpMbKltTracker, vpMbEdgeKltTracker).
-  tracking using two cameras, all the necessary methods accept directly the corresponding parameter for each camera. By default, the first parameter corresponds to the reference camera.
-  tracking using multiple cameras, you have to supply the different parameters with a map. The key corresponds to the name of the camera and the value to the parameter.

The following table sums up how to call the different methods based on the camera configuration for the main functions.

<table>
<caption id="mbdep_stereo_method_example_table">Example of the different method signatures.</caption>
<tr><th>Method calling example:               <th>Monocular case                         <th>Stereo case                                               <th>Multiple cameras case                                 <th>Remarks
<tr><td>Construct a model-based edge tracker: <td>vpMbEdgeMultiTracker tracker           <td>vpMbEdgeMultiTracker tracker(2)                           <td>vpMbEdgeMultiTracker tracker(5)                       <td>The default constructor corresponds to the monocular configuration.
<tr><td>Load a configuration file:            <td>tracker.loadConfigFile("config.xml")   <td>tracker.loadConfigFile("config1.xml", "config2.xml")      <td>tracker.loadConfigFile(mapOfConfigFiles)              <td>Each tracker can have different parameters (intrinsic parameters, visibility angles, etc.).
<tr><td>Load a model file:                    <td>tracker.loadModel("model.cao")         <td>tracker.loadModel("model.cao")                            <td>tracker.loadModel("model.cao")                        <td>All the trackers must used the same 3D model.
<tr><td>Get the intrinsic camera parameters:  <td>tracker.getCameraParameters(cam)       <td>tracker.getCameraParameters(cam1, cam2)                   <td>tracker.getCameraParameters(mapOfCam)                 <td>
<tr><td>Set the transformation matrix between each camera and the reference one: <td>                                       <td>tracker.setCameraTransformationMatrix(mapOfCamTrans)      <td>tracker.setCameraTransformationMatrix(mapOfCamTrans)  <td>For the reference camera, the identity homogeneous matrix must be set.
<tr><td>Setting to display the features:<td>tracker.setDisplayFeatures(true)       <td>tracker.setDisplayFeatures(true)                          <td>tracker.setDisplayFeatures(true)                      <td>This is a general parameter.
<tr><td>Initialize the pose by click:         <td>tracker.initClick(I, "f_init.init")    <td>tracker.initClick(I1, I2, "f_init1.init", "f_init2.init") <td>tracker.initClick(mapOfImg, mapOfInitFiles)           <td>If the transformation matrices between the cameras have been set, some init files can be omitted as long as the reference camera has an init file.
<tr><td>Track the object:                     <td>tracker.track(I)                       <td>tracker.track(I1, I2)                                     <td>tracker.track(mapOfImg)                               <td>
<tr><td>Get the pose:                         <td>tracker.getPose(cMo)                   <td>tracker.getPose(c1Mo, c2Mo)                               <td>tracker.getPose(mapOfPoses)                           <td>tracker.getPose(cMo) will return the pose for the reference camera in the multiple cameras configurations.
<tr><td>Display the model:                    <td>tracker.display(I, cMo, cam, ...)      <td>tracker.display(I1, I2, c1Mo, c2Mo, cam1, cam2, ...)      <td>tracker.display(mapOfImg, mapOfPoses, mapOfCam)       <td>
</table>
  
\note As the trackers are stored in an alphabetic order internally, you have to match the method parameters with the correct tracker position in the map in the stereo cameras case.

\subsection mbdep_stereo_example_code Example code
The following example comes from tutorial-mb-tracker-stereo.cpp and allows to track a tea box modeled in cao format using one of the three multi-view markerless trackers implemented in ViSP. In this example we consider a stereo configuration.

Once built, to choose which tracker to use, run the binary with the following argument:
\code
$ ./tutorial-mb-tracker-stereo --tracker <0=egde|1=klt|2=hybrid>
\endcode

The source code is the following:
\include tutorial-mb-tracker-stereo.cpp

\subsection mbdep_stereo_explanation_of_the_code Explanation of the code

The previous source code shows how to use a model-based tracking on stereo images using the standard procedure to configure the tracker:
-  construct the tracker
-  initialize the tracker by loading a configuration file
-  load a 3D model
-  process the tracking
-  get the pose and display the model in the image

\warning The xml2 library, used to load the configuration file, is required to build the tutorial example. OpenCV is also required and the KLT module has to be enabled to use the KLT functionality.

Please refer to the tutorial \ref tutorial-tracking-mb-deprecated in order to have the explanations about the configuration parameters (\ref mbdep_settings) and how to model an object in a ViSP compatible format (\ref mbdep_advanced_cao).

To test the three kind of trackers, only vpMbEdgeKltMultiTracker.h header is required as the others (vpMbEdgeMultiTracker.h and vpMbKltMultiTracker.h) are already included in the hybrid header class. 

\snippet tutorial-mb-tracker-stereo.cpp Include

We declare two images for the left and right camera views.

\snippet tutorial-mb-tracker-stereo.cpp Image

To construct a stereo tracker, we have to specify the desired number of cameras (in our case 2) as argument given to the tracker constructors:

\snippet tutorial-mb-tracker-stereo.cpp Constructor

\note We used a pointer to vpMbTracker to be able to construct a tracker according to the desired type (edge, klt or hybrid) but you could directly declare the desired tracker class in your program.

All the configuration parameters for the tracker are stored in xml configuration files. To load the different files, we use:

\snippet tutorial-mb-tracker-stereo.cpp Load config file

\note The dynamic cast is necessary to access to the specific methods that are not declared in vpMbTracker.

The following code is used in order to retrieve the intrinsic camera parameters:

\snippet tutorial-mb-tracker-stereo.cpp Get camera parameters

To load the 3D object model, we use:

\snippet tutorial-mb-tracker-stereo.cpp Load cao

We can also use the following setting that enables the display of the features used during the tracking:

\snippet tutorial-mb-tracker-stereo.cpp Set display features

We have to set the transformation matrices between the cameras and the reference camera to be able to compute the control law in a reference camera frame. In the code we consider the left camera with the name "Camera1" as the reference camera. For the right camera with the name "Camera2" we have to set the transformation (\f$ ^{c_{right}}{\bf M}_{c_{left}} \f$).
This transformation is read from cRightMcLeft.txt file. Since our left and right cameras are not moving, this transformation is constant and has not to be updated in the tracking loop:

\note For the reference camera, the camera transformation matrix has to be specified as an identity homogeneous matrix (no rotation, no translation). By default the vpHomogeneousMatrix constructor builds an identity matrix.

\snippet tutorial-mb-tracker-stereo.cpp Set camera transformation matrix

The initial pose is set by clicking on specific points in the image:

\snippet tutorial-mb-tracker-stereo.cpp Init

The poses for the left and right views have to be declared:

\snippet tutorial-mb-tracker-stereo.cpp cMo

The tracking is done by:

\snippet tutorial-mb-tracker-stereo.cpp Track

The poses for each camera are retrieved with:

\snippet tutorial-mb-tracker-stereo.cpp Get pose

To display the model with the estimated pose, we use:

\snippet tutorial-mb-tracker-stereo.cpp Display

Finally, do not forget to delete the pointers:

\snippet tutorial-mb-tracker-stereo.cpp Cleanup

\section mbdep_stereo_advanced Advanced

\subsection mbdep_stereo_moving_cameras How to deal with moving cameras

The principle remains the same than with static cameras. You have to supply the camera transformation matrices to the tracker each time the cameras move and before calling the track method:
\code
mapOfCamTrans["Camera1"] = vpHomogeneousMatrix(); //The Camera1 is the reference camera.
mapOfCamTrans["Camera2"] = get_c2Mc1(); //Get the new transformation between the two cameras.
tracker.setCameraTransformationMatrix(mapOfCamTrans);
tracker.track(mapOfImg);
\endcode

This information can be available through the robot kinematics or using different kind of sensors.

The following video shows the stereo hybrid model-based tracking based on object edges and KLT features located on visible faces. The result of the tracking is then used to servo the Romeo humanoid robot eyes to gaze toward the object. The images were captured by cameras located in the Romeo eyes.

\htmlonly
<p align="center"><iframe width="560" height="315" src="https://www.youtube.com/embed/IguBxf4VRUc" frameborder="0" allowfullscreen></iframe></p>
\endhtmlonly

\section mbdep_stereo_next Next tutorial
You are now ready to see the next \ref tutorial-tracking-mb-generic.

*/
