
/**
  \page tutorial-getting-started Tutorial: How to create and build a CMake project that uses ViSP on Unix or Windows 
  \tableofcontents

\note We assume in this tutorial that you have successfully installed ViSP either with an \ref tuto_install_sdk or with an \ref tuto_install_src.

In this tutorial you will learn how to use ViSP either on Unix-like systems (including OSX, Fedora, Ubuntu, Debian, ...) or on Windows.

The easiest way of using ViSP in your project is to use <a href="http://www.cmake.org/">CMake</a>. If you are not familiar with CMake, you can check the <a href="http://www.cmake.org/cmake/help/cmake_tutorial.html">tutorial</a>.

Note also that all the material (source code and images) described in this tutorial is part of ViSP source code and could be downloaded using the following command:

\code
$ svn export https://github.com/lagadic/visp.git/trunk/tutorial/image
\endcode
 
\section image_code Create a program using ViSP
Let's start to write our first program to see how to read an image and open a window to display the image. This simple program is provided in tutorial-viewer.cpp example and given below:

\include tutorial-viewer.cpp

Here is the detailed explanation of the source, line by line :
\snippet tutorial-viewer.cpp Include display

Include all the headers for image viewers. The two first one are for Windows systems. They require that Direct 3D or the \e Graphical \e Device \e Interface (\e GDI) coming with the installation of Visual Studio are available. The third one needs GTK that is cross-platform. The fourth is for unix-like systems and requires that \e libX11 is available. The last one is also cross-platform and requires that OpenCV is available. 

\snippet tutorial-viewer.cpp Include io
Include the header that allows to read/write PGM, PPM, PNG and JPEG images from the disk using vpImageIo class.

\snippet tutorial-viewer.cpp vpImage construction
Create an instance of a color image where each pixel is coded in RGBa.

\snippet tutorial-viewer.cpp vpImage reading
The image \c I is initialized by reading an image file from the disk. If the image format is not supported we throw an exception.

\snippet tutorial-viewer.cpp vpDisplay construction
Create an instance of an image display window for image \c I. The first viewer that is available is used. Here we create the link between the image \c I and the display \c d. Note that an image can only have one display. 

\snippet tutorial-viewer.cpp vpDisplay set title
The title of the display is then set to \c "My image".  

\snippet tutorial-viewer.cpp vpDisplay display
First we display the content of the image \c I, then we flush the display to render the image.

\snippet tutorial-viewer.cpp vpDisplay get click
Here we handle mouse events. We are waiting for a blocking mouse click to end the program.

\section image_cmake Create a CMake file

Now you have to create your \c CMakeLists.txt file. It should look like this:

\code
project(tutorial-image)

cmake_minimum_required(VERSION 2.8)

find_package(VISP REQUIRED)

include_directories(${VISP_INCLUDE_DIRS})

add_executable(tutorial-viewer tutorial-viewer.cpp)
target_link_libraries(tutorial-viewer ${VISP_LIBRARIES})
\endcode

The \c find_package() CMake command searches for a \c VISPConfig.cmake file that will define the corresponding variables:
- \c VISP_INCLUDE_DIRS   : ViSP and third-party headers location
- \c VISP_LIBRARIES      : ViSP and third-party libraries name and location

Note that the previous \c CMakeLists.txt file can also be:
\code
project(tutorial-image)

cmake_minimum_required(VERSION 2.8)

find_package(VISP REQUIRED)
if(VISP_FOUND)
  include(${VISP_USE_FILE})
endif(VISP_FOUND)

add_executable(tutorial-viewer tutorial-viewer.cpp)
\endcode

where \c VISP_USE_FILE variable is set to the full path to \c VISPUse.cmake file that contains all the CMake material that allow to build your project with ViSP. In other terms, the line
\code
  include(${VISP_USE_FILE})
\endcode
will include the following lines to your \c CMakeFile.txt
\code
  include_directories(${VISP_INCLUDE_DIRS})
  link_libraries(${VISP_LIBRARIES})
\endcode


\section image_unix On Unix-like systems

\subsection image_unix_config Configure your project

Proceed as with any other project using CMake:

\code
$ cmake .
\endcode

By default \c cmake searches \c VISPConfig.cmake file in folders like \c /usr/share or \c /usr/local/share. If ViSP was not installed in \c /usr or \c /usr/local it is possible that you get the following error:
\code
CMake Error at CMakeLists.txt:5 (find_package):
  Could not find module FindVISP.cmake or a configuration file for package
  VISP.

  Adjust CMAKE_MODULE_PATH to find FindVISP.cmake or set VISP_DIR to the
  directory containing a CMake configuration file for VISP.  The file will
  have one of the following names:

    VISPConfig.cmake
    visp-config.cmake
\endcode

To help \c cmake to find \c VISPConfig.cmake file, just set \c VISP_DIR environment variable and call \c cmake again:
\code
$ export VISP_DIR=/home/ViSP-install-folder/lib/<multi-arch-folder>/cmake/visp
$ cmake .
\endcode
or run cmake with the additional VISP_DIR definition
\code
$ cmake -DVISP_DIR=/home/ViSP-install-folder/lib/<multi-arch-folder>/cmake/visp .
\endcode

Depending on the platform \c \<multi-arch-folder\> can be empty (OSX) or for example equal to \c x86_64-linux-gnu on Ubuntu.

\note If you build ViSP from source following one of the tutorials \ref tutorial_install_src, you can avoid the \c make \c install step and set \c VISP_DIR to the build location instead of the install location.
 
\subsection image_unix_build Generate the executable

Just run:
\code
$ make
\endcode

\subsection image_unix_output Run the executable

By now you should have an executable called \c tutorial-viewer. You just have to run it giving an image location as an argument:

\code
$ ./tutorial-viewer monkey.ppm
\endcode


Here is a screen shot of the resulting output window :

  \image html img-monkey.png

\section image_win On Windows

We suppose from now, that you have created a folder (let say \c C:/ViSP/ViSP-started) that contains the following files: CMakeLists.txt, tutorial-viewer.cpp and monkey.ppm. These files are also provided in ViSP source code, in \c tutorial/image folder.


\subsection image_win_config Configure your project

- Launch CMake (cmake-gui) from Windows "Start" menu. Set the source code location as \c C:/ViSP/ViSP-started. Here we set the build location to the same folder.

\image html img-started-win-cmake-1.jpg

- Press "Configure" button, and select your compiler. In our case we will use Visual Studio 11 Win64. Press then "Finish". The configuration is now under progress and should lead to the following image.

\image html img-started-win-cmake-2.jpg

- Note here that CMake has automatically found the location of ViSP install folder; \c C:/ViSP/ViSP-install.

- Press then "Configure" button to remove the red lines, and then "Generate" button. As presented in the following image, all the red lines should disappear.

\image html img-started-win-cmake-3.jpg

- From now, in \c C:/ViSP/ViSP-started you should have \c tutorial-image.sln Visual Studio solution file.

\subsection image_win_build Generate the executable

- To open the project in Visual Studio C++ just double click on \c C:/ViSP/ViSP-started/tutorial-image.sln solution file. 

\image html img-started-win-msvc-1.jpg

- Now to build the solution, enter "BUILD/Build Solution" menu.

\image html img-started-win-msvc-2.jpg

- In \c C:/ViSP/ViSP-started/Debug folder you have now \c tutorial-image.exe executable.


\subsection image_win_output Run the executable

- In your "Start" menu click on "Run" and type in \c cmd.exe to run a terminal.
- Enter in \c C:/ViSP/ViSP-started/Debug folder, and run \c tutorial-viewer.exe with an image location as argument:

\image html img-started-win-run.jpg


- Here is a screen shot of the resulting output window :

  \image html img-monkey-win.jpg

\section image_next Next tutorial

You are now ready to see the \ref tutorial-image-display.
There is also the \ref tutorial-contrib-module that could be useful to understand how to introduce new developments in ViSP.
*/
