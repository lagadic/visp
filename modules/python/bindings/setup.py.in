#############################################################################
#
# ViSP, open source Visual Servoing Platform software.
# Copyright (C) 2005 - 2025 by Inria. All rights reserved.
#
# This software is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# See the file LICENSE.txt at the root directory of this source
# distribution for additional information about the GNU GPL.
#
# For using ViSP with software that can not be combined with the GNU
# GPL, please contact Inria about acquiring a ViSP Professional
# Edition License.
#
# See https://visp.inria.fr for more information.
#
# This software was developed at:
# Inria Rennes - Bretagne Atlantique
# Campus Universitaire de Beaulieu
# 35042 Rennes Cedex
# France
#
# If you have questions regarding the use of this file, please contact
# Inria at visp@inria.fr
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
# Description:
# ViSP Python bindings module
#
#############################################################################

import os
import re
import subprocess
import sys
from pathlib import Path

import setuptools
from setuptools import Extension, setup
from setuptools.command.build_ext import build_ext
from setuptools.command.install import install
from distutils.command import build as build_module
from pathlib import Path

package_name = 'visp'
version = '@VISP_PYTHON_VERSION@'

package_data = {}

# Inspired by the pyrealsense2 binding
# Include a .so lib that is already compiled into the package
if os.name == 'posix':
  package_data[''] = ['*.so', 'py.typed']
else:
  package_data[''] = ['*.pyd', '*.dll', 'py.typed']

# This creates a list which is empty but returns a length of 1.
# Should make the wheel a binary distribution and platlib compliant.
class EmptyListWithLength(list):
  def __len__(self):
    return 1

# Add all Python files that are in the visp/apps folder as console scripts.
# Console scripts can be started as if they were executables in the PATH
base_path = Path(__file__).parent.absolute()



packages = ['visp', 'visp.apps', 'visp.python']

apps_folder = base_path / package_name / 'apps'
console_scripts = []

base_app_package_name = f'{package_name}.apps'

# Files cannot have "-" in their names. To stick with ViSP convention, we replace "_" with "-"
for app_file in apps_folder.iterdir():
  if app_file.name.endswith('.py'):
    console_scripts.append(f'{app_file.stem.replace("_", "-")}={base_app_package_name}.{app_file.stem}:main')

# Add all submodules as belonging to the package.
# Without this, all the Python extensions are not added to the package
# and are not visible when visp is installed in the site-packages
base_name = 'visp.python'
base_path = base_path / package_name

def add_submodule_recursive(p: Path, base_name, package_list):
  for subfolder in p.iterdir():
    if subfolder.is_dir():
      new_base = base_name + '.' + subfolder.name

      package_list.append(new_base)
      add_submodule_recursive(subfolder, new_base, package_list)

add_submodule_recursive(base_path, 'visp', packages)

setup(
  name=package_name,
  version=version,
  author="Samuel Felton",
  packages=packages,
  author_email="samuel.felton@irisa.fr",
  description="Python wrapper for the Visual Servoing Platform",
  long_description="",
  setup_requires=[
    "setuptools"
  ],
  entry_points = {
    'console_scripts': console_scripts,
  },
  ext_modules=EmptyListWithLength(),
  zip_safe=False,
  include_package_data=True,
  package_data=package_data,
  extras_require={"test": ["pytest>=6.0"]},
  python_requires=">=3.7",
)
