{
  "classes": {
    "vpArray2D": {
      "additional_bindings": "bindings_vpArray2D",
      "use_buffer_protocol": true,
      "specializations": [
        {
          "python_name": "ArrayDouble2D",
          "arguments": [
            "double"
          ]
        },
        {
          "python_name": "ArrayInt2D",
          "arguments": [
            "int"
          ]
        }
      ],
      "acknowledge_pointer_or_ref_fields": [
        "Type*",
        "Type**"
      ],
      "methods": [
        {
          "static": false,
          "signature": "Type* operator[](unsigned int)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpArray2D<Type>& operator=(vpArray2D<Type>&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": " vpArray2D(vpArray2D<Type>&&)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "void insert(const vpArray2D<Type> &, const vpArray2D<Type> &, vpArray2D<Type> &, unsigned int, unsigned int)",
          "custom_name": "insertStatic"
        },
        {
          "static": false,
          "signature": " vpArray2D(vpArray2D<double>&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpArray2D<double>& operator=(vpArray2D<double>&&)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "void view(vpArray2D<Type>&, Type*, unsigned int, unsigned int)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "vpArray2D<Type> view(Type*, unsigned int, unsigned int)",
          "ignore": true
        }
      ]
    },
    "vpMath": {
      "methods": [
        {
          "static": true,
          "signature": "double lineFitting(const std::vector<vpImagePoint>&, double&, double&, double&)",
          "use_default_param_policy": false,
          "param_is_input": [
            true,
            false,
            false,
            false
          ],
          "param_is_output": [
            false,
            true,
            true,
            true
          ]
        },
        {
          "static": true,
          "signature": "void swap(Type&, Type&)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(unsigned char)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(char)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(unsigned short)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(short)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(unsigned)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(int)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(float)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "Tp saturate(double)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "std::vector<double> linspace(T, T, unsigned int)",
          "specializations": [
            [
              "TypePythonScalar"
            ]
          ]
        },
        {
          "static": true,
          "signature": "Type abs(const Type&)",
          "specializations": [
            [
              "TypePythonScalar"
            ]
          ]
        },
        {
          "static": true,
          "signature": "void swap(Type&, Type&)",
          "specializations": [
            [
              "TypePythonScalar"
            ]
          ]
        },
        {
          "static": true,
          "signature": "Type minimum(const Type&, const Type&)",
          "specializations": [
            [
              "TypePythonScalar"
            ]
          ]
        },
        {
          "static": true,
          "signature": "Type maximum(const Type&, const Type&)",
          "specializations": [
            [
              "TypePythonScalar"
            ]
          ]
        },
        {
          "static": true,
          "signature": "T clamp(const T&, const T&, const T&)",
          "specializations": [
            [
              "TypePythonScalar"
            ]
          ]
        }
      ]
    },
    "vpTranslationVector": {
      "additional_bindings": "bindings_vpTranslationVector",
      "methods": [
        {
          "static": true,
          "signature": "vpMatrix skew(const vpTranslationVector &)",
          "custom_name": "skewOf"
        },
        {
          "static": true,
          "signature": "void skew(const vpTranslationVector &, vpMatrix&)",
          "custom_name": "skewOf"
        },
        {
          "static": false,
          "signature": "vpTranslationVector& buildFrom(const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpTranslationVector& buildFrom(const vpHomogeneousMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpTranslationVector& buildFrom(const vpPoseVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpTranslationVector& buildFrom(const vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpColVector": {
      "additional_bindings": "bindings_vpColVector",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": true,
          "signature": "vpColVector stack(const vpColVector &, const vpColVector &)",
          "custom_name": "stackVectors"
        },
        {
          "static": true,
          "signature": "void stack(const vpColVector &, const vpColVector &, vpColVector &)",
          "custom_name": "stackVectors"
        },
        {
          "static": false,
          "signature": "std::ostream& maplePrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& matlabPrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": " vpColVector(vpColVector&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpColVector& operator=(vpColVector&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpColVector& operator<<(double*)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& cppPrint(std::ostream&, const std::string&, bool)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& csvPrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpColVector& deg2rad()",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpColVector& normalize()",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpColVector& normalize(vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpColVector& rad2deg()",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": true,
          "signature": "void view(vpColVector&, double*, unsigned int)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "vpColVector view(double*, unsigned int)",
          "ignore": true
        }
      ]
    },
    "vpRowVector": {
      "additional_bindings": "bindings_vpRowVector",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": true,
          "signature": "vpRowVector stack(const vpRowVector &, const vpRowVector &)",
          "custom_name": "stackVectors"
        },
        {
          "static": true,
          "signature": "void stack(const vpRowVector &, const vpRowVector &, vpRowVector &)",
          "custom_name": "stackVectors"
        },
        {
          "static": false,
          "signature": "std::ostream& maplePrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& matlabPrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& csvPrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& cppPrint(std::ostream&, const std::string&, bool)",
          "ignore": true
        },
        {
          "static": false,
          "signature": " vpRowVector(vpRowVector&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpRowVector& operator=(vpRowVector&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpRowVector& normalize()",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRowVector& normalize(vpRowVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": true,
          "signature": "vpRowVector view(double*, unsigned int)",
          "ignore": true
        }
      ]
    },
    "vpMatrix": {
      "ignore_repr": true,
      "additional_bindings": "bindings_vpMatrix",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": true,
          "signature": "vpMatrix insert(const vpMatrix &, const vpMatrix &, unsigned int , unsigned int)",
          "custom_name": "insertMatrixInMatrix"
        },
        {
          "static": true,
          "signature": "void insert(const vpMatrix &, const vpMatrix &, vpMatrix &, unsigned int , unsigned int)",
          "custom_name": "insertMatrixInMatrix"
        },
        {
          "static": true,
          "signature": "void kron(const vpMatrix &, const vpMatrix &, vpMatrix &)",
          "custom_name": "kronStatic"
        },
        {
          "static": true,
          "signature": "vpMatrix kron(const vpMatrix &, const vpMatrix &)",
          "custom_name": "kronStatic"
        },
        {
          "signature": "vpMatrix stack(const vpMatrix &, const vpMatrix &)",
          "static": true,
          "custom_name": "stackMatrices"
        },
        {
          "static": true,
          "signature": "vpMatrix stack(const vpMatrix &, const vpRowVector &)",
          "custom_name": "stackRow"
        },
        {
          "signature": "vpMatrix stack(const vpMatrix &, const vpColVector &)",
          "static": true,
          "custom_name": "stackColumn"
        },
        {
          "signature": "void stack(const vpMatrix &, const vpMatrix &, vpMatrix &)",
          "static": true,
          "custom_name": "stackMatrices"
        },
        {
          "signature": "void stack(const vpMatrix &, const vpRowVector &, vpMatrix &)",
          "static": true,
          "custom_name": "stackRow"
        },
        {
          "signature": "void stack(const vpMatrix &, const vpColVector &, vpMatrix &)",
          "static": true,
          "custom_name": "stackColumn"
        },
        {
          "static": false,
          "signature": "std::ostream& cppPrint(std::ostream&, const std::string&, bool)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& csvPrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& maplePrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "std::ostream& matlabPrint(std::ostream&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": " vpMatrix(vpMatrix&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpMatrix& operator=(vpMatrix&&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpMatrix& operator<<(double*)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "vpMatrix view(double*, unsigned int, unsigned int)",
          "ignore": true
        },
        {
          "static": true,
          "signature": "void view(vpMatrix&, double*, unsigned int, unsigned int)",
          "ignore": true
        }
      ]
    },
    "vpRotationMatrix": {
      "additional_bindings": "bindings_vpRotationMatrix",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const vpRzyxVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const vpQuaternionVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const vpPoseVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const vpRzyzVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const vpRxyzVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRotationMatrix& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpHomogeneousMatrix": {
      "additional_bindings": "bindings_vpHomogeneousMatrix",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": false,
          "signature": "void convert(std::vector<double>&)",
          "use_default_param_policy": false,
          "param_is_input": [
            false
          ],
          "param_is_output": [
            true
          ]
        },
        {
          "static": false,
          "signature": "void convert(std::vector<float>&)",
          "ignore": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const vpTranslationVector&, const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const vpTranslationVector&, const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const vpTranslationVector&, const vpQuaternionVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const vpPoseVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const std::vector<float>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const std::vector<double>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpHomogeneousMatrix& buildFrom(const double&, const double&, const double&, const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpRotationVector": {
      "additional_bindings": "bindings_vpRotationVector"
    },
    "vpRxyzVector": {
      "methods": [
        {
          "static": false,
          "signature": "vpRxyzVector& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRxyzVector& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRxyzVector& buildFrom(const vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRxyzVector& buildFrom(const std::vector<double>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRxyzVector& buildFrom(const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpRzyzVector": {
      "methods": [
        {
          "static": false,
          "signature": "vpRzyzVector& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyzVector& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyzVector& buildFrom(const vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyzVector& buildFrom(const std::vector<double>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyzVector& buildFrom(const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpRzyxVector": {
      "methods": [
        {
          "static": false,
          "signature": "vpRzyxVector& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyxVector& buildFrom(const vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyxVector& buildFrom(const std::vector<double>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyxVector& buildFrom(const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpRzyxVector& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpQuaternionVector": {
      "methods": [
        {
          "static": false,
          "signature": "vpQuaternionVector& buildFrom(const double&, const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpQuaternionVector& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpQuaternionVector& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpQuaternionVector& buildFrom(const vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpQuaternionVector& buildFrom(const std::vector<double>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpPoseVector": {
      "additional_bindings": "bindings_vpPoseVector",
      "methods": [
        {
          "static": false,
          "signature": "vpPoseVector& buildFrom(const double&, const double&, const double&, const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpPoseVector& buildFrom(const vpHomogeneousMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpPoseVector& buildFrom(const vpTranslationVector&, const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpPoseVector& buildFrom(const vpTranslationVector&, const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpVelocityTwistMatrix": {
      "methods": [
        {
          "static": false,
          "signature": "vpVelocityTwistMatrix& buildFrom(const vpTranslationVector&, const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpVelocityTwistMatrix& buildFrom(const vpTranslationVector&, const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpVelocityTwistMatrix& buildFrom(const vpHomogeneousMatrix&, bool)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpVelocityTwistMatrix& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpVelocityTwistMatrix& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpForceTwistMatrix": {
      "methods": [
        {
          "static": false,
          "signature": "vpForceTwistMatrix& buildFrom(const vpTranslationVector&, const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpForceTwistMatrix& buildFrom(const vpTranslationVector&, const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpForceTwistMatrix& buildFrom(const vpHomogeneousMatrix&, bool)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpForceTwistMatrix& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpForceTwistMatrix& buildFrom(const vpThetaUVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpThetaUVector": {
      "methods": [
        {
          "static": false,
          "signature": "void extract(double&, vpColVector&)",
          "use_default_param_policy": false,
          "param_is_input": [
            false,
            false
          ],
          "param_is_output": [
            true,
            true
          ]
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpHomogeneousMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpPoseVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpRotationMatrix&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpRzyxVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpRzyzVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpRxyzVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpQuaternionVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const vpColVector&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const std::vector<double>&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        },
        {
          "static": false,
          "signature": "vpThetaUVector& buildFrom(const double&, const double&, const double&)",
          "return_policy": "reference",
          "keep_alive": [
            [
              1,
              0
            ]
          ],
          "returns_ref_ok": true
        }
      ]
    },
    "vpRobust": {
      "methods": [
        {
          "static": false,
          "signature": "vpRobust& operator=(const vpRobust&&)",
          "ignore": true
        }
      ]
    },
    "vpSubRowVector": {
      "acknowledge_pointer_or_ref_fields": [
        "vpRowVector*"
      ]
    },
    "vpSubColVector": {
      "acknowledge_pointer_or_ref_fields": [
        "vpColVector*"
      ]
    },
    "vpSubMatrix": {
      "acknowledge_pointer_or_ref_fields": [
        "vpMatrix*"
      ]
    }
  }
}
