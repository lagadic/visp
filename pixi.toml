[project]
authors = ["Olivier Roussel <olivier.roussel@inria.fr>"]
channels = ["conda-forge", "panda3d-forge"]
name = "visp"
platforms = ["linux-64", "osx-64", "win-64", "osx-arm64"]
version = "3.6.0"
license = "GPL-2.0-only"
license-file = "LICENSE.txt"

# TODO: add ccache support
[build-dependencies]
cxx-compiler = ">=1.7.0"
cmake = ">=3.22"
ninja = ">=1.11"
pkg-config = ">=0.29.2"
git = ">=2.47.0"

[dependencies]
libopencv = "*"
eigen = "*"
libjpeg-turbo = "*"
libpng = "*"
libblas = "*"
libcblas = "*"
liblapack = "*"
liblapacke = "*"

[target.unix.dependencies]
xorg-libx11 = "*"
xorg-libxfixes = "*"
xorg-xorgproto = "*"
# TODO: activate on windows as well
libxml2 = "*"
libdc1394 = ">=2.2.6"
librealsense = "*"

[target.linux-64.dependencies]
mesa-libegl-cos7-x86_64 = "*"

[target.osx.dependencies]
llvm-openmp = "*"

[activation]
scripts = ["development/scripts/pixi/activation.sh"]

[target.win-64.activation]
scripts = ["development/scripts/pixi/activation.bat"]

# Use clang-cl on Windows
# We must use scripts instead of env to setup CC and CXX
# to avoid cxx-compiler to overwrite them.
[feature.clang-cl]
platforms = ["win-64"]
dependencies = { clang = "*", llvm-openmp = "*" }
activation = { scripts = ["development/scripts/pixi/activation_clang_cl.bat"] }

[feature.python-bindings]
dependencies = { python = ">=3.8", pybind11 = "*", pip = "*", doxygen = "*" }
[feature.python-bindings.tasks]
build = { cmd = "cmake --build $VISP_BUILD_DIR --parallel $CPU_COUNT --target visp_python_bindings", depends-on = ["install"] }
python-test = { cmd = "cmake --build $VISP_BUILD_DIR --config Release --target visp_python_bindings_test", depends-on = ["build"] }
view-python-logs = { cmd = "$IDE $VISP_BUILD_DIR/modules/python/bindings/logs", env = { IDE = "code" }, depends-on = ["configure"] }
python-doc = { cmd = "cmake --build $VISP_BUILD_DIR --parallel $CPU_COUNT --target visp_python_bindings_doc", depends-on = ["build"] }
view-python-doc = { cmd = "$BROWSER $VISP_BUILD_DIR/doc/python/index.html", env = { BROWSER = "firefox" } }

[feature.rbt]
dependencies = { nlohmann_json = "*", panda3d = { version = ">=1.10.15", channel = "panda3d-forge" } }

[feature.doc]
dependencies = { doxygen = "*", mathjax = "*" }
[feature.doc.tasks]
doc = { cmd = "cmake --build $VISP_BUILD_DIR --target visp_doc", depends-on = ["configure"] }
view-doc = { cmd = "$BROWSER $VISP_BUILD_DIR/doc/html/index.html", env = { BROWSER = "firefox" } }
[feature.doc.activation.env]
VISP_USE_MATHJAX = "ON"
[feature.tests.activation.env]
VISP_BUILD_TESTS = "ON"
# Tests that require display / rendering are only supported on linux based CI
[feature.tests.target.linux.activation.env]
DISPLAY = ":99"
VISP_ENABLE_TEST_WITHOUT_DISPLAY = "OFF"
[feature.tests.target.linux.tasks]
init-testing = { cmd = "bash ./development/scripts/pixi/xvfb.sh" }

[feature.examples.activation.env]
VISP_BUILD_EXAMPLES = "ON"

[feature.tutorials.activation.env]
VISP_BUILD_TUTORIALS = "ON"

[tasks]
init-testing = {}
configure = { cmd = [
  "cmake",
  "-G",
  "Ninja",
  "-B",
  "$VISP_BUILD_DIR",
  "-S",
  ".",
  "-DCMAKE_VERBOSE_MAKEFILE=OFF",
  "-DCMAKE_BUILD_TYPE=$VISP_BUILD_TYPE",
  "-DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX",
  "-DBUILD_TESTS=$VISP_BUILD_TESTS",
  "-DENABLE_TEST_WITHOUT_DISPLAY=$VISP_ENABLE_TEST_WITHOUT_DISPLAY",
  "-DBUILD_TUTORIALS=$VISP_BUILD_TUTORIALS",
  "-DBUILD_EXAMPLES=$VISP_BUILD_EXAMPLES",
  "-DUSE_MATHJAX=$VISP_USE_MATHJAX",
  "$VISP_EXTRA_CMAKE_ARGS"
] }
build-base = { cmd = "cmake --build $VISP_BUILD_DIR --parallel $CPU_COUNT", depends-on = ["configure"] }
build = { depends-on = ["build-base"]}
install = { cmd = "cmake --build $VISP_BUILD_DIR --target install", depends-on = ["build-base"] }
clean = { cmd = "rm -rf $VISP_BUILD_DIR" }
test = { cmd = "ctest --test-dir $VISP_BUILD_DIR --output-on-failure", depends-on = ["install", "init-testing"] }

[environments]
# Minimal set of features and python bindings
with-python = { features = ["python-bindings", "doc"] }
# All <environment-name>-clang-cl variants are for building under Clang-cl compiler under windows instead of MSVC CL
with-python-clang-cl = { features = ["python-bindings", "doc", "clang-cl"] }
# All ViSP features including python bindings
all = { features = ["rbt", "python-bindings", "doc"] }
all-clang-cl = { features = ["rbt", "python-bindings", "doc", "clang-cl"] }
# All ViSP features (incl. python bindings) + tests
all-with-tests = { features = ["rbt", "python-bindings", "doc", "tests"] }
all-clang-cl-with-tests = { features = ["rbt", "python-bindings", "doc", "clang-cl", "tests"] }
# Environments with all features + build of tests / tutorials / examples (mainly for CI)
full-ci = { features = ["rbt", "python-bindings", "tests", "examples", "tutorials"]}
full-ci-clang-cl = { features = ["rbt", "python-bindings", "tests", "examples", "tutorials"]}
