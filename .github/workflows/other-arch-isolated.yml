name: Other-architectures-isolated

# https://www.jeffgeerling.com/blog/2020/running-github-actions-workflow-on-schedule-and-other-events
# https://github.com/uraimo/run-on-arch-action
on:
  push:
  pull_request:
  schedule:
    - cron: '0 2 * * SUN'

jobs:
  build-other-architectures:
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }} ${{ matrix.endianness }}

    # Run steps on a matrix of different arch/distro combinations
    strategy:
      fail-fast: false
      matrix:
        include:
          # - arch: armv6
          #   distro: bullseye
          #   target: ARMV6
          - arch: armv7
            distro: ubuntu22.04
            target: ARMV7
            endianness: (Little Endian)
          #- arch: aarch64
          #  distro: ubuntu22.04 #fedora_latest
          #  target: ARMV8
          #  endianness: (Little Endian)
          #- arch: ppc64le
          #  distro: ubuntu22.04
          #  target: POWER8
          #  endianness: (Little Endian)
          #- arch: s390x
          #  distro: ubuntu22.04
          #  target: Z13
          #  endianness: (Big Endian)

    steps:
    # https://github.com/marketplace/actions/cancel-workflow-action
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run on arch
      uses: uraimo/run-on-arch-action@v2.2.1
      with:
        githubToken: ${{ github.token }}
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        run: |
          lscpu

          apt-get update && apt-get install -y lsb-release git build-essential cmake
          lsb_release -a
          dpkg --list | grep compiler

          echo "pwd: "
          pwd
          echo "GITHUB_WORKSPACE:"
          echo $GITHUB_WORKSPACE

          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_DEMOS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TUTORIALS=OFF -DBUILD_TESTS=OFF -DBUILD_MODULE_visp_tt=OFF -DBUILD_MODULE_visp_tt_mi=OFF -DBUILD_MODULE_visp_robot=OFF -DBUILD_MODULE_visp_sensor=OFF -DBUILD_MODULE_visp_klt=OFF -DBUILD_MODULE_visp_detection=OFF -DBUILD_MODULE_visp_ar=OFF -DBUILD_MODULE_visp_blob=OFF -DBUILD_MODULE_visp_gui=OFF -DBUILD_MODULE_visp_imgproc=OFF -DBUILD_MODULE_visp_me=OFF -DBUILD_MODULE_visp_vision=OFF -DBUILD_MODULE_visp_vs=OFF -DBUILD_MODULE_visp_visual_features=OFF -DBUILD_JAVA=OFF -DBUILD_MODULE_visp_java=OFF -DBUILD_MODULE_visp_java_binding=OFF -DUSE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=/tmp/usr/local
          cat ViSP-third-party.txt
          make -j$(nproc) install

          echo "Clone test-armv7"
          git clone --depth 1 https://github.com/fspindle/test-armv7.git ${HOME}/test-armv7
          cd ${HOME}/test-armv7

          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=DEBUG -DVISP_DIR=/tmp/usr/local/lib/cmake/visp
          make -j$(nproc)

          echo "Lanch ./test-create-seq"
          ./test-create-seq

          echo "ls -als /tmp"
          ls -als /tmp
          echo "ls -als /tmp/unknown"
          ls -als /tmp/unknown
          echo "ls -als /tmp/unknown/video"
          ls -als /tmp/unknown/video

          echo "Run ./test-scandir /tmp/unknown/video"
          ./test-scandir /tmp/unknown/video

          echo "Run ./test-scandir /tmp/unknown/video/"
          ./test-scandir /tmp/unknown/video/

          echo "Add manually new files"
          touch /tmp/unknown/video/manual100.pgm
          touch /tmp/unknown/video/manual101.pgm
          touch /tmp/unknown/video/manual102.pgm

          echo "ls -als /tmp/unknown/video"
          ls -als /tmp/unknown/video

          echo "Run ./test-scandir /tmp/unknown/video"
          ./test-scandir /tmp/unknown/video

          echo "Run ./test-scandir /tmp/unknown/video/"
          ./test-scandir /tmp/unknown/video/

          echo "Create folder and files"
          mkdir /tmp/test
          mkdir /tmp/test/scandir
          touch /tmp/test/scandir/manual100.pgm
          touch /tmp/test/scandir/manual102.pgm
          touch /tmp/test/scandir/manual104.pgm

          echo "Run ./test-scandir /tmp/test/scandir"
          ./test-scandir /tmp/test/scandir

          echo "Run ./test-scandir /tmp/test/scandir/"
          ./test-scandir /tmp/test/scandir/

          echo "Run ./test-read-seq"
          ./test-read-seq
